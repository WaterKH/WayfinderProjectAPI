@page "/projects"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@inject NavigationManager NavigationManager

@inject IJSRuntime JS
@inject IToastService toastService


@using Microsoft.EntityFrameworkCore
@using WayfinderProject.Data
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers
@using WayfinderProjectAPI.Data;

<PageTitle>The Wayfinder Project - Projects</PageTitle>

<div class="wayfinder-background">
    <div class="row" style="width: 100%; margin: 0px">
        <div class="col-md-12" style="padding: 40px 110px;">
            <div class="wayfinder-title">
                <img src="/images/wayfinder_project_title.png" />
            </div>

            <div class="wayfinder-description">
                <strong>Projects</strong>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12" style="text-align: center;">
        <input maxlength="50" class="custom-input" @bind="@this.name" @oninput="@((input) => { if (input.Value != null) { this.name = (string)input.Value; } })">
        <button class="wayfinder-button" onclick="@(async () => await this.CreateProject(this.name))">Create Project</button>
</div>
</div>

<div class="row">
    <div class="col-md-10">
        <NavBar @ref="WayfinderProjectNavBar" Categories="this.projects" UpdateCurrentCategory="@(async (string project) => await UpdateCurrentProject(project))" CurrentCategory="@this.CurrentProject" Loading="@this.Loading" />
    </div>

    <div class="col-md-2" style="align-self: end;">
        <button onclick="@(async () => await this.EditProject())" class="btn wayfinder-outlined-button" style="margin-left: 15px;">Edit Current Project</button>
    </div>
</div>

<hr />


@if (!string.IsNullOrEmpty(this.CurrentProject))
{
    <NavBar @ref="WayfinderNavBar" Categories="this.types" UpdateCurrentCategory="@(async (string type) => await UpdateCurrentType(type))" CurrentCategory="@this.CurrentType" Loading="@this.Loading" />

    @if (!string.IsNullOrEmpty(this.CurrentType))
    {
        <SubNavBar @ref="WayfinderSubNavBar" FocusOption="@this.categories.FirstOrDefault()" Options="this.categories" UpdateCurrentOption="@(async (string category) => await UpdateCurrentCategory(category))" StartingOption="@this.CurrentCategory" IsFocusEnabled="false" DisplayIcons="false" />
    }
}

<br />
<br />

@if (this.Loading)
{
    <div class="row" style="justify-content: center;">
        <div class="loader col-md-12"></div>
    </div>
}
else if (this.CurrentType == "Memory Archive")
{
    if (this.CurrentCategory == "Scenes" && this.SceneDtos.Count > 0)
    {
        <SceneTable @ref="MainSceneTable" Items="this.SceneDtos" Context="Scene" OpenRowQuery="this.OpenRow">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Scene</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <SceneTableRow Scene="@Scene" MainTable="@MainSceneTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Scene.Id))"
                       Notes="@this.GetNotes(Scene.Id)" NotesCallbackMethod="@(() => this.EditNotes(Scene.Id, this.GetNotes(Scene.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <SceneTableExpandedRow Scene="@Scene" API="@this.api" />
            </ExpandedRowTemplate>
        </SceneTable>
    }
    else if (this.CurrentCategory == "Interactions" && this.InteractionDtos.Count > 0)
    {
        <InteractionTable @ref="MainInteractionTable" Items="this.InteractionDtos" Context="Interaction">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Interaction</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InteractionTableRow Interaction="@Interaction" MainTable="@MainInteractionTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Interaction.Id))"
                        Notes="@this.GetNotes(Interaction.Id)" NotesCallbackMethod="@(() => this.EditNotes(Interaction.Id, this.GetNotes(Interaction.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InteractionTableExpandedRow Interaction="@Interaction" API="@this.api" />
            </ExpandedRowTemplate>
        </InteractionTable>
    }
    else if (this.CurrentCategory == "Trailers" && this.TrailerDtos.Count > 0)
    {
        <TrailerTable @ref="MainTrailerTable" Items="this.TrailerDtos" Context="Trailer">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Trailer</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <TrailerTableRow Trailer="@Trailer" MainTable="@MainTrailerTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Trailer.Id))"
                                     Notes="@this.GetNotes(Trailer.Id)" NotesCallbackMethod="@(() => this.EditNotes(Trailer.Id, this.GetNotes(Trailer.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <TrailerTableExpandedRow Trailer="@Trailer" API="@this.api" />
            </ExpandedRowTemplate>
        </TrailerTable>
    }
    else if (this.CurrentCategory == "Interviews" && this.InterviewDtos.Count > 0)
    {
        <InterviewTable @ref="MainInterviewTable" Items="this.InterviewDtos" Context="Interview" OpenRowQuery="this.OpenRow">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Interview</label></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Games</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InterviewTableRow Interview="@Interview" MainTable="@MainInterviewTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Interview.Id))"
                        Notes="@this.GetNotes(Interview.Id)" NotesCallbackMethod="@(() => this.EditNotes(Interview.Id, this.GetNotes(Interview.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InterviewTableExpandedRow Interview="@Interview" API="@this.api" />
            </ExpandedRowTemplate>
        </InterviewTable>
    }
}
else if (this.CurrentType == "Jiminy's Journal")
{
    if (this.CurrentCategory == "Story" && this.JJStoryDtos.Count > 0)
    {
        <JournalEntryTable @ref="MainStoryTable" Items="this.JJStoryDtos" Context="Story">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Title</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <JournalEntryTableRow JournalEntry="@Story" MainTable="@MainStoryTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Story.Id))"
                              Notes="@this.GetNotes(Story.Id)" NotesCallbackMethod="@(() => this.EditNotes(Story.Id, this.GetNotes(Story.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <JournalEntryTableExpandedRow JournalEntry="@Story" API="@this.api" />
            </ExpandedRowTemplate>
        </JournalEntryTable>
    }
    else if (this.CurrentCategory == "Reports" && this.JJReportDtos.Count > 0)
    {
        <JournalEntryTable @ref="MainReportTable" Items="this.JJReportDtos" Context="Report">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Title</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <JournalEntryTableRow JournalEntry="@Report" MainTable="@MainReportTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Report.Id))"
                              Notes="@this.GetNotes(Report.Id)" NotesCallbackMethod="@(() => this.EditNotes(Report.Id, this.GetNotes(Report.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <JournalEntryTableExpandedRow JournalEntry="@Report" API="@this.api" />
            </ExpandedRowTemplate>
        </JournalEntryTable>
    }
    else if (this.CurrentCategory == "Characters" && this.JJCharacterDtos.Count > 0)
    {
        <JournalEntryTable @ref="MainCharacterTable" Items="this.JJCharacterDtos" Context="Character">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Title</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <JournalEntryTableRow JournalEntry="@Character" MainTable="@MainCharacterTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Character.Id))"
                              Notes="@this.GetNotes(Character.Id)" NotesCallbackMethod="@(() => this.EditNotes(Character.Id, this.GetNotes(Character.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <JournalEntryTableExpandedRow JournalEntry="@Character" API="@this.api" />
            </ExpandedRowTemplate>
        </JournalEntryTable>
    }
    else if (this.CurrentCategory == "Enemies" && this.JJEnemyDtos.Count > 0)
    {
        <JournalEntryTable @ref="MainEnemyTable" Items="this.JJEnemyDtos" Context="Enemy">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Title</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <JournalEntryTableRow JournalEntry="@Enemy" MainTable="@MainEnemyTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Enemy.Id))"
                              Notes="@this.GetNotes(Enemy.Id)" NotesCallbackMethod="@(() => this.EditNotes(Enemy.Id, this.GetNotes(Enemy.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <JournalEntryTableExpandedRow JournalEntry="@Enemy" API="@this.api" />
            </ExpandedRowTemplate>
        </JournalEntryTable>
    }
}
else if (this.CurrentType == "Moogle Shop")
{
    if (this.CurrentCategory == "Recipes" && this.MSRecipeDtos.Count > 0)
    {
        <RecipeTable @ref="MainRecipeTable" Items="this.MSRecipeDtos" Context="Recipe">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Name</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <RecipeTableRow Recipe="@Recipe" MainTable="@MainRecipeTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Recipe.Id))"
                        Notes="@this.GetNotes(Recipe.Id)" NotesCallbackMethod="@(() => this.EditNotes(Recipe.Id, this.GetNotes(Recipe.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <RecipeTableExpandedRow Recipe="@Recipe" API="@this.api" />
            </ExpandedRowTemplate>
        </RecipeTable>
    }
    else if (this.CurrentCategory == "Items" && this.MSInventoryItemDtos.Count > 0)
    {
        <InventoryTable @ref="MainInventoryItemTable" Items="this.MSInventoryItemDtos" Context="Inventory">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Name</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InventoryTableRow Inventory="@Inventory" MainTable="@MainInventoryItemTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Inventory.Id))"
                           Notes="@this.GetNotes(Inventory.Id)" NotesCallbackMethod="@(() => this.EditNotes(Inventory.Id, this.GetNotes(Inventory.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InventoryTableExpandedRow Inventory="@Inventory" API="@this.api" />
            </ExpandedRowTemplate>
        </InventoryTable>
    }
    else if (this.CurrentCategory == "Weapons" && this.MSInventoryWeaponDtos.Count > 0)
    {
        <InventoryTable @ref="MainInventoryWeaponTable" Items="this.MSInventoryWeaponDtos" Context="Inventory">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Name</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Obtain By</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InventoryTableRow Inventory="@Inventory" MainTable="@MainInventoryWeaponTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Inventory.Id))"
                           Notes="@this.GetNotes(Inventory.Id)" NotesCallbackMethod="@(() => this.EditNotes(Inventory.Id, this.GetNotes(Inventory.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InventoryTableExpandedRow Inventory="@Inventory" API="@this.api" />
            </ExpandedRowTemplate>
        </InventoryTable>
    }
    else if (this.CurrentCategory == "Accessories & Armor" && this.MSInventoryAccessoryArmorDtos.Count > 0)
    {
        <InventoryTable @ref="MainInventoryAccessoryArmorTable" Items="this.MSInventoryAccessoryArmorDtos" Context="Inventory">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Name</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Obtain By</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InventoryTableRow Inventory="@Inventory" MainTable="@MainInventoryAccessoryArmorTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Inventory.Id))"
                           Notes="@this.GetNotes(Inventory.Id)" NotesCallbackMethod="@(() => this.EditNotes(Inventory.Id, this.GetNotes(Inventory.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InventoryTableExpandedRow Inventory="@Inventory" API="@this.api" />
            </ExpandedRowTemplate>
        </InventoryTable>
    }
    else if (this.CurrentCategory == "Synthesis Materials" && this.MSInventoryMaterialDtos.Count > 0)
    {
        <InventoryTable @ref="MainInventoryMaterialTable" Items="this.MSInventoryMaterialDtos" Context="Inventory">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Name</label></th>
                <th><label class="header-label">Notes</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InventoryTableRow Inventory="@Inventory" MainTable="@MainInventoryMaterialTable" ProjectView="true" ProjectCallbackMethod="@(() => this.DeleteProjectRecord(Inventory.Id))"
                           Notes="@this.GetNotes(Inventory.Id)" NotesCallbackMethod="@(() => this.EditNotes(Inventory.Id, this.GetNotes(Inventory.Id)))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InventoryTableExpandedRow Inventory="@Inventory" API="@this.api" />
            </ExpandedRowTemplate>
        </InventoryTable>
    }

}

<span style="margin-bottom: 50px;"></span>


<style>
.advanced-search-box {
    margin-top: 10px;
    padding: 0px 15px 15px 25px;
    border-radius: 30px;
    width: 100%;
    height: auto;
    background-color: #f1f1f1;
}

.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public bool Loading { get; set; }
    public string CurrentProject { get; set; } = "";
    public string CurrentType { get; set; } = "";
    public string CurrentCategory { get; set; } = "";
    public string CurrentSubOption { get; set; } = "Details";

    private WayfinderController? api;

    #region Query Parameters
    [Parameter]
    [SupplyParameterFromQuery(Name = "project")]
    public int ProjectId { get; set; } = -1;

    [Parameter]
    [SupplyParameterFromQuery(Name = "category")]
    public string? CategoryQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string? TypeQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "open_row")]
    public int OpenRow { get; set; } = -1;
    #endregion Query Parameters

    #region Scene Variables
    private List<SceneDto> SceneDtos = new List<SceneDto>();
    private SceneTable<SceneDto>? MainSceneTable;
    
    private List<InteractionDto> InteractionDtos = new List<InteractionDto>();
    private InteractionTable<InteractionDto>? MainInteractionTable;
    
    private List<TrailerDto> TrailerDtos = new List<TrailerDto>();
    private TrailerTable<TrailerDto>? MainTrailerTable;

    private List<InterviewDto> InterviewDtos = new List<InterviewDto>();
    private InterviewTable<InterviewDto>? MainInterviewTable;
    #endregion Scene Variables

    #region Entry Variables
    private List<JournalEntryDto> JJStoryDtos = new List<JournalEntryDto>();
    private JournalEntryTable<JournalEntryDto>? MainStoryTable;

    private List<JournalEntryDto> JJReportDtos = new List<JournalEntryDto>();
    private JournalEntryTable<JournalEntryDto>? MainReportTable;

    private List<JournalEntryDto> JJCharacterDtos = new List<JournalEntryDto>();
    private JournalEntryTable<JournalEntryDto>? MainCharacterTable;

    private List<JournalEntryDto> JJEnemyDtos = new List<JournalEntryDto>();
    private JournalEntryTable<JournalEntryDto>? MainEnemyTable;
    #endregion Entry Variables

    #region Record Variables
    private List<RecipeDto> MSRecipeDtos = new List<RecipeDto>();
    private RecipeTable<RecipeDto>? MainRecipeTable;

    private List<InventoryDto> MSInventoryItemDtos = new List<InventoryDto>();
    private InventoryTable<InventoryDto>? MainInventoryItemTable;

    private List<InventoryDto> MSInventoryWeaponDtos = new List<InventoryDto>();
    private InventoryTable<InventoryDto>? MainInventoryWeaponTable;

    private List<InventoryDto> MSInventoryAccessoryArmorDtos = new List<InventoryDto>();
    private InventoryTable<InventoryDto>? MainInventoryAccessoryArmorTable;

    private List<InventoryDto> MSInventoryMaterialDtos = new List<InventoryDto>();
    private InventoryTable<InventoryDto>? MainInventoryMaterialTable;
    #endregion Record Variables

    private List<string> projects = new List<string>();
    private NavBar? WayfinderProjectNavBar;

    private List<string> types = new List<string> { "Memory Archive", "Jiminy's Journal", "Moogle Shop" };
    private NavBar? WayfinderNavBar;

    private List<string> categories = new List<string> { "Scenes", "Interactions", "Trailers", "Interviews" };
    private SubNavBar? WayfinderSubNavBar;

    public List<ProjectDto> ProjectDtos { get; set; } = new List<ProjectDto>();

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private bool failed = false;
    private string name = string.Empty;

    private bool isPatron;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var authState = await authenticationStateTask;

            if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/Identity/Account/Login", true);
            }

            // Set Patron Status
            if (authState.User.Identity != null)
            {
                WayfinderProjectUser user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);

                if (!string.IsNullOrEmpty(user.PatreonAccessToken) && !string.IsNullOrEmpty(user.PatreonRefreshToken))
                {
                    var patreonService = new PatreonService(new HttpClient());

                    try
                    {
                        this.isPatron = await patreonService.IsPatron(context, user.Id);
                    }
                    catch (Exception)
                    {
                        await patreonService.RefreshToken(context, user.Id);

                        this.isPatron = await patreonService.IsPatron(context, user.Id);
                    }
                }
            }
        }

        this.api = new WayfinderController(context);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await this.LoadProjects();
                await this.HandleQueryParams();
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
                this.failed = true;

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }
        }

        if (this.failed)
        {
            try
            {
                Thread.Sleep(1000);

                await this.LoadProjects();

                await this.HandleQueryParams();
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task UpdateCurrentProject(string project)
    {
        this.CurrentProject = project;

        this.HideProjects();

        this.CurrentType = "Memory Archive";
        await this.UpdateCurrentType("Memory Archive");

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task UpdateCurrentType(string type)
    {
        if (this.Loading) return;

        this.CurrentType = type;

        if (this.CurrentType == "Memory Archive")
        {
            this.categories = new List<string> { "Scenes", "Interactions", "Trailers", "Interviews" };
        }
        else if (this.CurrentType == "Jiminy's Journal")
        {
            this.categories = new List<string> { "Story", "Reports", "Characters", "Enemies" }; //, "Collectibles" };
    }
        else if (this.CurrentType == "Moogle Shop")
        {
            this.categories = new List<string> { "Recipes", "Items", "Weapons", "Accessories & Armor", "Synthesis Materials" };
        }

        this.CurrentCategory = this.categories.First();
        await this.UpdateCurrentCategory(this.CurrentCategory);

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task UpdateCurrentCategory(string category)
    {
        this.CurrentCategory = category;

        await this.ShowProjectsForCategory();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task LoadProjects()
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        this.ProjectDtos = await this.api.GetProjects(user.Id, true);
        this.projects = this.ProjectDtos.Select(x => x.Name).ToList();

        this.CurrentProject = this.projects.FirstOrDefault() ?? string.Empty;
        await this.UpdateCurrentProject(this.CurrentProject);

        await this.ShowProjectsForCategory();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public string GetNotes(int id)
    {
        var projectDto = this.ProjectDtos.FirstOrDefault(x => x.Name == this.CurrentProject);

        if (projectDto == null) 
            return string.Empty;

        var record = projectDto.ProjectRecords.FirstOrDefault(x => x.SpecificRecordId == id);

        if (record == null) 
            return string.Empty;

        return record.Notes;
    }

    public async Task EditNotes(int id, string notes)
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }
        
        var parameters = new ModalParameters();

        parameters.Add("AccountId", user.Id);
        parameters.Add("ProjectName", this.CurrentProject);
        parameters.Add("Type", this.CurrentType);
        parameters.Add("Category", this.CurrentCategory);
        parameters.Add("SpecificRecordId", id);
        parameters.Add("Notes", notes);
        parameters.Add("API", this.api);

        var options = new ModalOptions { Class = "modal-custom" };

        var temp = Modal.Show<EditProjectRecordModal>("Edit Project Record", parameters, options);
        await temp.Result;

        this.ProjectDtos = await this.api.GetProjects(user.Id, true);
        await this.ShowProjectsForCategory();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task ShowProjectsForCategory()
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        this.Loading = true;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        this.HideProjects();

        var records = (await this.api.GetProjectRecords(user.Id, this.CurrentProject)).Where(x => x.Category == this.CurrentCategory && x.Type == this.CurrentType).Select(x => x.SpecificRecordId);

        if (this.CurrentType == "Memory Archive")
        {
            if (this.CurrentCategory == "Scenes")
            {
                this.SceneDtos = await this.context.Scenes.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Interactions")
            {
                this.InteractionDtos = await this.context.Interactions.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Trailers")
            {
                this.TrailerDtos = await this.context.Trailers.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Interviews")
            {
                this.InterviewDtos = await this.context.Interviews.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
        }
        else if (this.CurrentType == "Jiminy's Journal")
        {
            if (this.CurrentCategory == "Story")
            {
                this.JJStoryDtos = await this.context.JournalEntries.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Reports")
            {
                this.JJReportDtos = await this.context.JournalEntries.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Characters")
            {
                this.JJCharacterDtos = await this.context.JournalEntries.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Enemies")
            {
                this.JJEnemyDtos = await this.context.JournalEntries.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
        }
        else if (this.CurrentType == "Moogle Shop")
        {
            if (this.CurrentCategory == "Recipes")
            {
                this.MSRecipeDtos = await this.context.Recipes.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Items")
            {
                this.MSInventoryItemDtos = await this.context.Inventory.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Weapons")
            {
                this.MSInventoryWeaponDtos = await this.context.Inventory.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Accessories & Armor")
            {
                this.MSInventoryAccessoryArmorDtos = await this.context.Inventory.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Synthesis Materials")
            {
                this.MSInventoryMaterialDtos = await this.context.Inventory.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
        }

        this.Loading = false;
        
        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public void HideProjects()
    {
        this.SceneDtos = new List<SceneDto>();
        this.InteractionDtos = new List<InteractionDto>();
        this.TrailerDtos = new List<TrailerDto>();
        this.InterviewDtos = new List<InterviewDto>();
    }

    public async Task DeleteProjectRecord(int id)
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        await this.api.InsertRemoveProjectRecord(user.Id, this.CurrentProject, this.CurrentType, this.CurrentCategory, id);

        await this.ShowProjectsForCategory();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task DeleteProject(string name)
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        foreach (var projectRecord in this.ProjectDtos.Where(x => x.Name == name))
        {
            await this.api.InsertRemoveProjectRecord(user.Id, this.CurrentProject, this.CurrentType, this.CurrentCategory, projectRecord.Id);
        }

        await this.api.RemoveProject(user.Id, name);

        await this.ShowProjectsForCategory();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task CreateProject(string projectName)
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        await this.api.InsertProject(user.Id, projectName, string.Empty);

        this.projects = (await this.api.GetProjects(user.Id)).Select(x => x.Name).ToList();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task EditProject()
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        var parameters = new ModalParameters();

        parameters.Add("AccountId", user.Id);
        parameters.Add("ProjectName", this.CurrentProject);
        parameters.Add("API", this.api);

        var options = new ModalOptions { Class = "modal-custom" };

        var temp = Modal.Show<EditProjectModal>("Edit Project", parameters, options);
        await temp.Result;

        this.projects = (await this.api.GetProjects(user.Id)).Select(x => x.Name).ToList();

        await this.ShowProjectsForCategory();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task<bool> HandleQueryParams()
    {
        var optionUpdated = false;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });

        try
        {
            
        }
        catch(Exception)
        {
            //this.failed = true;
        }

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        return optionUpdated;
    }
}