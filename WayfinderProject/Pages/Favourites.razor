@page "/favourites"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@inject NavigationManager NavigationManager

@inject IJSRuntime JS
@inject IToastService toastService


@using Microsoft.EntityFrameworkCore
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers
@using WayfinderProjectAPI.Data;

<PageTitle>The Wayfinder Project - Projects</PageTitle>

<div class="wayfinder-background">
    <div class="row" style="width: 100%; margin: 0px">
        <div class="col-md-12" style="padding: 40px 110px;">
            <div class="wayfinder-title">
                <img src="/images/wayfinder_project_title.png" />
            </div>

            <div class="wayfinder-description">
                <strong>Favourites</strong>
            </div>
        </div>
    </div>
</div>

<NavBar @ref="WayfinderNavBar" Categories="this.types" UpdateCurrentCategory="@(async (string type) => await UpdateCurrentType(type))" CurrentCategory="@this.CurrentType" Loading="@this.Loading" />

@if (!string.IsNullOrEmpty(this.CurrentType))
{
    <SubNavBar @ref="WayfinderSubNavBar" FocusOption="@this.categories.FirstOrDefault()" Options="this.categories" UpdateCurrentOption="@(async (string category) => await UpdateCurrentCategory(category))" StartingOption="@this.CurrentCategory" />
}

<br />
<br />

@if (this.Loading)
{
    <div class="row" style="justify-content: center;">
        <div class="loader col-md-12"></div>
    </div>
}
else if (this.CurrentType == "Memory Archive")
{
    if (this.CurrentCategory == "Scenes" && this.SceneDtos.Count > 0)
    {
        <SceneTable @ref="MainSceneTable" Items="this.SceneDtos" Context="Scene">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Scene</label></th>
                <th><img src="/images/icons/worlds_gray.png" class="header-margins"> <label class="header-label">Worlds</label></th>
                <th><img src="/images/icons/areas_gray.png" class="header-margins"> <label class="header-label">Areas</label></th>
                <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Characters</label></th>
                <th><img src="/images/icons/music_gray.png" class="header-margins"> <label class="header-label">Music</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <SceneTableRow Scene="@Scene" MainTable="@MainSceneTable"
                    FavoriteCallbackMethod="@(() => this.SetFavorite("Scenes", Scene.Id))" IsFavorite="@(this.IsFavoriteForUser("Scenes", Scene.Id))"
                    ProjectCallbackMethod="@(() => this.OpenProjectModal("Scenes", Scene.Id))" IsProject="@(this.IsProjectForUser("Scenes", Scene.Id))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <SceneTableExpandedRow Scene="@Scene" API="@this.api" />
            </ExpandedRowTemplate>
        </SceneTable>
    }
    else if (this.CurrentCategory == "Trailers")
    {
    
    }
    else if (this.CurrentCategory == "Interviews" && this.InterviewDtos.Count > 0)
    {
        <InterviewTable @ref="MainInterviewTable" Items="this.InterviewDtos" Context="Interview">
            <TableHeader>
                <th style="text-align: left;"></th>
                <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Interview</label></th>
                <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Games</label></th>
                <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Participants</label></th>
                <th><img src="/images/icons/worlds_gray.png" class="header-margins"> <label class="header-label">Provider</label></th>
                <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Translator</label></th>
                <th style="text-align: right;"></th>
            </TableHeader>
            <RowTemplate>
                <InterviewTableRow Interview="@Interview" MainTable="@MainInterviewTable"
                    FavoriteCallbackMethod="@(() => this.SetFavorite("Interviews", Interview.Id))" IsFavorite="@(this.IsFavoriteForUser("Interviews", Interview.Id))"
                    ProjectCallbackMethod="@(() => this.OpenProjectModal("Interviews", Interview.Id))" IsProject="@(this.IsProjectForUser("Interviews", Interview.Id))" />
            </RowTemplate>
            <ExpandedRowTemplate>
                <InterviewTableExpandedRow Interview="@Interview" API="@this.api" />
            </ExpandedRowTemplate>
        </InterviewTable>
    }
}

<span style="margin-bottom: 50px;"></span>


<style>
.advanced-search-box {
    margin-top: 10px;
    padding: 0px 15px 15px 25px;
    border-radius: 30px;
    width: 100%;
    height: auto;
    background-color: #f1f1f1;
}

.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public bool Loading { get; set; }
    public string CurrentType { get; set; } = "";
    public string CurrentCategory { get; set; } = "";
    public string CurrentSubOption { get; set; } = "Details";

    private WayfinderController? api;

    private List<SceneDto> SceneDtos = new List<SceneDto>();
    private SceneTable<SceneDto>? MainSceneTable;

    private List<InterviewDto> InterviewDtos = new List<InterviewDto>();
    private InterviewTable<InterviewDto>? MainInterviewTable;

    private List<string> types = new List<string> { "Memory Archive", "Jiminy's Journal", "Moogle Shop" };
    private NavBar? WayfinderNavBar;

    private List<string> categories = new List<string> { "Scenes", "Trailers", "Interviews" };
    private SubNavBar? WayfinderSubNavBar;

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private List<ProjectRecordDto> ProjectRecords = new List<ProjectRecordDto>();
    private List<FavoriteDto> FavouriteDtos = new List<FavoriteDto>();

    private bool failed = false;
    private string name = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var authState = await authenticationStateTask;

            if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/Identity/Account/Login", true);
            }
        }

        this.api = new WayfinderController(context);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await this.UpdateCurrentType("Memory Archive");

                await this.LoadFavourites();
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
                this.failed = true;

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }
        }

        if (this.failed)
        {
            try
            {
                Thread.Sleep(1000);

                await this.LoadFavourites();
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task UpdateCurrentType(string type)
    {
        if (this.Loading) return;

        this.CurrentType = type;

        if (this.CurrentType == "Memory Archive")
        {
            this.categories = new List<string> { "Scenes", "Trailers", "Interviews" };
        }
        else if (this.CurrentType == "Jiminy's Journal")
        {
            this.categories = new List<string> { "Story", "Reports", "Characters", "Enemies", "Collectibles" };
        }
        else if (this.CurrentType == "Moogle Shop")
        {
            this.categories = new List<string> { "Recipes", "Items", "Weapons", "Accessories & Armor", "Synthesis Materials" };
        }

        this.CurrentCategory = this.categories.First();
        await this.UpdateCurrentCategory(this.CurrentCategory);

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task UpdateCurrentCategory(string category)
    {
        this.CurrentCategory = category;

        await this.LoadFavourites();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task LoadFavourites()
    {
        if (this.authenticationStateTask == null || this.api == null || this.Loading) return;

        this.Loading = true;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });

        var authState = await this.authenticationStateTask;

        WayfinderProjectUser user = new();
        if (authState.User.Identity != null)
        {
            user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
        }

        this.FavouriteDtos = await this.api.GetFavourites(user.Id, this.CurrentType, this.CurrentCategory);
        var records = this.FavouriteDtos.Select(x => x.SpecificRecordId);

        if (this.CurrentType == "Memory Archive")
        {
            if (this.CurrentCategory == "Scenes")
            {
                this.SceneDtos = await this.context.Scenes.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
            else if (this.CurrentCategory == "Interviews")
            {
                this.InterviewDtos = await this.context.Interviews.Where(x => records.Contains(x.Id)).ToDto().ToListAsync();
            }
        }

        this.Loading = false;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task SetFavorite(string category, int specificRecordId)
    {
        if (this.authenticationStateTask != null && this.api != null && !this.Loading)
        {
            var authState = await this.authenticationStateTask;

            WayfinderProjectUser user = new();
            if (authState.User.Identity != null)
            {
                user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
            }

            await this.api.InsertRemoveFavourite(user.Id, this.CurrentType, category, specificRecordId);

            await LoadFavourites();

            await InvokeAsync(() =>
            {
                this.StateHasChanged();
            });
        }
    }

    public bool IsFavoriteForUser(string category, int specificRecordId)
    {
        return this.FavouriteDtos.Exists(x => x.Type == this.CurrentType && x.Category == category && x.SpecificRecordId == specificRecordId);
    }

    public async Task OpenProjectModal(string category, int specificRecordId)
    {
        if (this.authenticationStateTask != null && this.api != null && !this.Loading)
        {
            var authState = await this.authenticationStateTask;

            WayfinderProjectUser user = new();
            if (authState.User.Identity != null)
            {
                user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
            }

            var parameters = new ModalParameters();

            parameters.Add("AccountId", user.Id);
            parameters.Add("Type", this.CurrentType);
            parameters.Add("Category", category);
            parameters.Add("SpecificRecordId", specificRecordId);
            parameters.Add("API", this.api);

            var options = new ModalOptions { Class = "modal-custom" };

            var temp = Modal.Show<ProjectModal>($"Projects - {category}", parameters, options);
            await temp.Result;

            this.ProjectRecords = (await this.api.GetProjects(user.Id)).SelectMany(x => x.ProjectRecords).ToList();
        }
    }

    public bool IsProjectForUser(string category, int specificRecordId)
    {
        return this.ProjectRecords.Exists(x => x.Type == this.CurrentType && x.Category == category && x.SpecificRecordId == specificRecordId);
    }
}