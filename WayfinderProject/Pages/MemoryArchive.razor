@page "/memory_archive"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@inject NavigationManager NavigationManager

@inject IJSRuntime JS
@inject IToastService toastService


@using Microsoft.EntityFrameworkCore
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers

<PageTitle>The Wayfinder Project - Memory Archive</PageTitle>

<br/>
<br/>

<div class="wayfinder-background">
    <div class="wayfinder-parallax">
        <div class="row" style="width: 100%; margin: 0px 0px 30px 0px">
            <div class="col-md-12" style="align-self: center;">
                <div class="wayfinder-title">
                    <img src="/images/wayfinder_project_title.png" />
                </div>

                <div class="wayfinder-description">
                    <strong>Search for a <span style="color: #522aff;">Word</span>, <span style="color: #ff7519;">Phrase</span> or <span style="color: #2cce78;">Quote</span>...</strong>
                </div>

                <div class="wayfinder-search">
                    <span class="wayfinder-search-icon material-icons">search</span>
                    <input id="main-search" name="main-search" class="custom-input" onchange="@(async (ChangeEventArgs e) => { this.quoteSearch = e?.Value?.ToString() ?? string.Empty; await this.SearchQuotes(this.quoteSearch); })" placeholder="Start Typing...">
                    <button class="wayfinder-search-button" onclick="@(() => this.SearchQuotes(this.quoteSearch))">Search</button>
                </div>

                <div class="wayfinder-sub-description">
                    <strong>
                        Or use a combination of filters below to search through <span style="color: #949dff;">Games</span>, <span style="color: #e685da;">Scenes</span>, <span style="color: #ea4a4a;">Worlds</span>
                        , <span style="color: #5499fc;">Areas</span>, <span style="color: #f3b222;">Characters</span> and <span style="color: #a13bfb;">Music</span>.
                    </strong>
                </div>
            </div>
        </div>

        <hr />

        <div class="row" style="width: 100%; margin: 0px 0px 30px 0px">
            <div class="col-md-1"></div>

            <div class="col-md-4" style="text-align: center;">
                <div class="wayfinder-title">
                    <strong><span style="color: #522aff;">Cutscene of the Day</span></strong>
                </div>

                <div class="wayfinder-alt-description">
                    <strong>
                        Discover a brand new daily cutscene by visiting The Wayfinder Project everyday! Follow <a href="https://twitter.com/WFP_KH" target="_blank">@@WPF_KH on Twitter</a>!
                    </strong>
                </div>

                <br />

                <button class="wayfinder-button" onclick="@(() => this.NavigateToDailyCutscene())" @onclick:stopPropagation>Daily Cutscene</button>
            </div>

            <div class="col-md-2"></div>

            <div class="col-md-4" style="text-align: center;">
                <div class="wayfinder-title">
                    <strong><span style="color: #ea4a4a;">Random</span> <span style="color: #2cce78;">Cutscene</span> <span style="color: #5499fc;">Generator</span></strong>
                </div>

                <div class="wayfinder-alt-description">
                    <strong>
                        Can't decide which scene you want to find? Let us choose for you by selecting a random scene!
                    </strong>
                </div>

                <br />

                <button class="wayfinder-button" onclick="@(() => this.NavigateToRandomCutscene())" @onclick:stopPropagation>Random Cutscene</button>
            </div>

            <div class="col-md-1"></div>
        </div>
    </div>
</div>


<NavBar @ref="WayfinderNavBar" Categories="this.categories" UpdateCurrentCategory="@(async (string category) => await UpdateCurrentCategory(category))" CurrentCategory="@this.CurrentCategory" Loading="@this.Loading" />
<SubNavBar @ref="WayfinderSubNavBar" FocusOption="@this.options.FirstOrDefault()" Options="this.options" UpdateCurrentOption="@(async (string option) => await UpdateCurrentOption(option))" StartingOption="@this.CurrentOption" />

<!-- TODO Probably want to convert this SearchComponent into something better - Keep track of selections and available outside of the component -->
<div id="scenes-search" class="advanced-search-box" style="@(this.CurrentCategory == "Cutscenes" ? "display: block;" : "display: none;")">
    <div class="row">
        <div class="col-md-12">
            <SearchComponent @ref="GamesSearch" Id="Games" Placeholder="Start Typing..." Color="#cdd1ff" Initial="this.Games" Selected="this.GamesSelected" Available="this.GamesAvailable" 
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

            <SearchComponent @ref="ScenesSearch" Id="Scenes" Placeholder="Start Typing..." Color="#e685da" Initial="this.Scenes" Selected="this.ScenesSelected" Available="this.ScenesAvailable" 
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

            <SearchComponent @ref="WorldsSearch" Id="Worlds" Placeholder="Start Typing..." Color="#ea4a4a" Initial="this.Worlds" Selected="this.WorldsSelected" Available="this.WorldsAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

            <SearchComponent @ref="AreasSearch" Id="Areas" Placeholder="Start Typing..." Color="#5499fc" Initial="this.Areas" Selected="this.AreasSelected" Available="this.AreasAvailable"
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

            <SearchComponent @ref="CharactersSearch" Id="Characters" Placeholder="Start Typing..." Color="#f3b222" Initial="this.Characters" Selected="this.CharactersSelected" Available="this.CharactersAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

            <SearchComponent @ref="MusicSearch" Id="Music" Placeholder="Start Typing..." Color="#a13bfb" Initial="this.Music" Selected="this.MusicSelected" Available="this.MusicAvailable"
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />
        </div>
    </div>
</div>

<br />
<br />

@if (this.Loading)
{
    <div class="row" style="justify-content: center;">
        <div class="loader col-md-12"></div>
    </div>
}
else if (this.CurrentCategory == "Cutscenes" && this.SceneDtos.Count > 0)
{
    <SceneTable @ref="MainSceneTable" Items="this.SceneDtos" Context="Scene" OpenRowQuery="this.OpenRow">
        <TableHeader>
            <th style="text-align: left;"></th>
            <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
            <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Scene</label></th>
            <th><img src="/images/icons/worlds_gray.png" class="header-margins"> <label class="header-label">Worlds</label></th>
            <th><img src="/images/icons/areas_gray.png" class="header-margins"> <label class="header-label">Areas</label></th>
            <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Characters</label></th>
            <th><img src="/images/icons/music_gray.png" class="header-margins"> <label class="header-label">Music</label></th>
        </TableHeader>
        <RowTemplate>
            <SceneTableRow Scene="@Scene" MainTable="@MainSceneTable" />
        </RowTemplate>
        <ExpandedRowTemplate>
            <SceneTableExpandedRow Scene="@Scene" API="@this.api" GenerateShareLink="@(async () => await GenerateShareLink())" />
        </ExpandedRowTemplate>
    </SceneTable>
}
else if (this.CurrentCategory == "Trailers")
{
    
}
else if (this.CurrentCategory == "Interviews")
{
    
}

<span style="margin-bottom: 50px;"></span>


<style>
.advanced-search-box {
    margin-top: 10px;
    padding: 0px 15px 15px 25px;
    border-radius: 30px;
    width: 100%;
    height: auto;
    background-color: #f1f1f1;
}

.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public bool Loading { get; set; }
    public string CurrentCategory { get; set; } = "Cutscenes";
    public string CurrentOption { get; set; } = "Games";
    public string CurrentSubOption { get; set; } = "Details";

    private string quoteSearch = "";
    private WayfinderController? api;

    #region Query Parameters
    [Parameter]
    [SupplyParameterFromQuery(Name = "area")]
    public string[]? AreaQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "character")]
    public string[]? CharacterQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "game")]
    public string[]? GameQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "music")]
    public string[]? MusicQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "scene")]
    public string[]? SceneQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "world")]
    public string[]? WorldQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "open_row")]
    public int OpenRow { get; set; } = -1;

    [Parameter]
    [SupplyParameterFromQuery(Name = "category")]
    public string? CategoryQuery { get; set; }
    #endregion Query Parameters

    private List<string> categories = new List<string> { "Cutscenes", "Trailers", "Interviews" };
    private NavBar? WayfinderNavBar;

    private List<string> options = new List<string> { "Scenes", "Games", "Worlds", "Areas", "Characters", "Music" };
    private SubNavBar? WayfinderSubNavBar;

    private bool canDisplayClearAll;

    #region Scene Variables
    private List<SceneDto> SceneDtos = new List<SceneDto>();

    public List<string> Areas { get; set; } = new List<string>();
    public List<string> Characters { get; set; } = new List<string>();
    public List<string> Games { get; set; } = new List<string>();
    public List<string> Music { get; set; } = new List<string>();
    public List<string> Scenes { get; set; } = new List<string>();
    public List<string> Worlds { get; set; } = new List<string>();


    #region Scecne Search Variables
    private SearchComponent? AreasSearch;
    private List<string> AreasSelected = new List<string>();
    private List<string> AreasAvailable = new List<string>();

    private SearchComponent? CharactersSearch;
    private List<string> CharactersSelected = new List<string>();
    private List<string> CharactersAvailable = new List<string>();

    private SearchComponent? GamesSearch;
    private List<string> GamesSelected = new List<string>();
    private List<string> GamesAvailable = new List<string>();

    private SearchComponent? MusicSearch;
    private List<string> MusicSelected = new List<string>();
    private List<string> MusicAvailable = new List<string>();

    private SearchComponent? ScenesSearch;
    private List<string> ScenesSelected = new List<string>();
    private List<string> ScenesAvailable = new List<string>();

    private SearchComponent? WorldsSearch;
    private List<string> WorldsSelected = new List<string>();
    private List<string> WorldsAvailable = new List<string>();
    #endregion Scene Search Variables

    private SceneTable<SceneDto>? MainSceneTable;
    #endregion Scene Variables
    //private Table<TrailerDto>? MainTrailerTable;
    //private Table<InterviewDto>? MainInterviewTable;


    private bool failed = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var authState = await authenticationStateTask;

            //if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
            //{
            //    NavigationManager.NavigateTo("/Identity/Account/Login", true);
            //}
        }

        this.api = new WayfinderController(context);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await this.ResetOptions();

                Thread.Sleep(1000);

                await this.HandleQueryParams();
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
                this.failed = true;

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }
        }

        if (this.failed)
        {
            try
            {
                Thread.Sleep(1000);

                await this.ResetOptions();

                Thread.Sleep(1000);

                await this.HandleQueryParams();
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task UpdateCurrentCategory(string category)
    {
        this.CurrentCategory = category;

        if (this.CurrentCategory == "Cutscenes")
        {
            this.options = new List<string> { "Scenes", "Games", "Worlds", "Areas", "Characters", "Music" };
        }
        else if (this.CurrentCategory == "Trailers")
        {
            this.options = new List<string>();
        }
        else if (this.CurrentCategory == "Interviews")
        {
            this.options = new List<string>();
        }

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task UpdateCurrentOption(string option)
    {
        this.CurrentOption = option;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task SearchQuotes(string search)
    {
        if (search.Length < 3)
            this.quoteSearch = "";
        else
            this.quoteSearch = search;


        if (!this.Loading)
        {
            await this.Search();
        }
    }

    public async Task Search()
    {
        this.Loading = true;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        if (this.CurrentCategory == "Cutscenes")
        {
            await this.SearchScenes();
        }
        else if (this.CurrentCategory == "Trailers")
        {
            await this.SearchTrailers();
        }
        else if (this.CurrentCategory == "Interviews")
        {
            await this.SearchInterviews();
        }

        this.Loading = false;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    #region Sub-Search Methods
    private async Task SearchScenes()
    {
        var games = this.GamesSearch != null ? string.Join("::", this.GamesSelected) != "" ? string.Join("::", this.GamesSelected) : null : null;
        var scenes = this.ScenesSearch != null ? string.Join("::", this.ScenesSelected) != "" ? string.Join("::", this.ScenesSelected) : null : null;
        var worlds = this.WorldsSearch != null ? string.Join("::", this.WorldsSelected) != "" ? string.Join("::", this.WorldsSelected) : null : null;
        var areas = this.AreasSearch != null ? string.Join("::", this.AreasSelected) != "" ? string.Join("::", this.AreasSelected) : null : null;
        var characters = this.CharactersSearch != null ? string.Join("::", this.CharactersSelected) != "" ? string.Join("::", this.CharactersSelected) : null : null;
        var music = this.MusicSearch != null ? string.Join("::", this.MusicSelected) != "" ? string.Join("::", this.MusicSelected) : null : null;
        var line = this.quoteSearch != "" ? this.quoteSearch : null;

        // TODO Remove this after we add in the pagination limiter?
        if (games == null && scenes == null && worlds == null && areas == null && characters == null && music == null && line == null)
        {
            this.SceneDtos = new List<SceneDto>();

            await Task.Run(async () => await this.ResetSceneOptions());

            this.canDisplayClearAll = false;
        }
        else if (this.authenticationStateTask != null && this.api != null)
        {
            var authState = await this.authenticationStateTask;
            //var user = this.context.Users.FirstOrDefault(x => x.UserName == authState.User.Identity.Name);

            this.SceneDtos = await this.api.SearchForScenes(games: games, scenes: scenes, worlds: worlds, areas: areas, characters: characters, music: music, line: line);

            // Maybe use the above to only call the search function we want to based on what's filled out and not null
            //if (user.ApiCallQuota > 0)
            //{
            //    this.SceneDtos = await this.api.SearchForScenes(games: games, scenes: scenes, worlds: worlds, areas: areas, characters: characters, music: music, line: line);

            //    user.ApiCallQuota -= 1;
            //    context.SaveChanges();

            //    if (user.ApiCallQuota == 2500)
            //    {
            //        toastService.ShowInfo("Used half of API Quota (2500/5000).");
            //    }
            //    else if (user.ApiCallQuota == 500)
            //    {
            //        toastService.ShowInfo("Used almost all of API Quota (500/5000). This resets at the start of each month.");
            //    }
            //    else if (user.ApiCallQuota == 0)
            //    {
            //        toastService.ShowInfo("Used all of API Quota (0/5000). This resets at the start of each month.");
            //    }
            //}
            //else
            //{
            //    // TOAST: Out of API Call Quota, resets monthly.
            //    toastService.ShowError("Reached max calls of API Quota (5000/5000). This resets at the start of each month.");
            //}

            this.UpdateSceneOptions();


            this.canDisplayClearAll = true;
        }

        if (MainSceneTable != null)
        {
            MainSceneTable.SetCurrentPage(1);
            MainSceneTable.CurrentExpandedRow = -1;
        }
    }

    private async Task SearchTrailers()
    {
        // Include game, worlds, areas, characters, music

        var games = this.GamesSearch != null ? string.Join("::", this.GamesSelected) != "" ? string.Join("::", this.GamesSelected) : null : null;
        var trailers = string.Empty; //this.ScenesSearch != null ? string.Join("::", this.ScenesSelected) != "" ? string.Join("::", this.ScenesSelected) : null : null;
        var worlds = this.WorldsSearch != null ? string.Join("::", this.WorldsSelected) != "" ? string.Join("::", this.WorldsSelected) : null : null;
        var areas = this.AreasSearch != null ? string.Join("::", this.AreasSelected) != "" ? string.Join("::", this.AreasSelected) : null : null;
        var characters = this.CharactersSearch != null ? string.Join("::", this.CharactersSelected) != "" ? string.Join("::", this.CharactersSelected) : null : null;
        var music = this.MusicSearch != null ? string.Join("::", this.MusicSelected) != "" ? string.Join("::", this.MusicSelected) : null : null;
        var line = this.quoteSearch != "" ? this.quoteSearch : null;

        // TODO Remove this after we add in the pagination limiter?
        if (games == null && trailers == null && worlds == null && areas == null && characters == null && music == null && line == null)
        {
            //this.SceneDtos = new List<SceneDto>();

            await Task.Run(async () => await this.ResetTrailerOptions());

            this.canDisplayClearAll = false;
        }
    }

    private async Task SearchInterviews()
    {
        // Include translators, interviewers, interviewees, date, link, game

        var games = this.GamesSearch != null ? string.Join("::", this.GamesSelected) != "" ? string.Join("::", this.GamesSelected) : null : null;
        var interviews = string.Empty; //this.ScenesSearch != null ? string.Join("::", this.ScenesSelected) != "" ? string.Join("::", this.ScenesSelected) : null : null;
        var worlds = this.WorldsSearch != null ? string.Join("::", this.WorldsSelected) != "" ? string.Join("::", this.WorldsSelected) : null : null;
        var areas = this.AreasSearch != null ? string.Join("::", this.AreasSelected) != "" ? string.Join("::", this.AreasSelected) : null : null;
        var characters = this.CharactersSearch != null ? string.Join("::", this.CharactersSelected) != "" ? string.Join("::", this.CharactersSelected) : null : null;
        var music = this.MusicSearch != null ? string.Join("::", this.MusicSelected) != "" ? string.Join("::", this.MusicSelected) : null : null;
        var line = this.quoteSearch != "" ? this.quoteSearch : null;

        // TODO Remove this after we add in the pagination limiter?
        if (games == null && interviews == null && worlds == null && areas == null && characters == null && music == null && line == null)
        {
            //this.SceneDtos = new List<SceneDto>();

            await Task.Run(async () => await this.ResetInterviewOptions());

            this.canDisplayClearAll = false;
        }
    }
    #endregion Sub-Search Methods

    public void UpdateOptions()
    {
        if (this.CurrentCategory == "Cutscenes")
        {
            this.UpdateSceneOptions();
        }
        else if (this.CurrentCategory == "Trailers")
        {
            this.UpdateTrailerOptions();
        }
        else if (this.CurrentCategory == "Interviews")
        {
            this.UpdateInterviewOptions();
        }
    }

    #region Sub-Option Methods
    private void UpdateSceneOptions()
    {
        this.AreasAvailable = this.SceneDtos.SelectMany(x => x.Areas).Select(y => y.Name).Except(this.AreasSelected).Distinct().ToList();
        this.CharactersAvailable = this.SceneDtos.SelectMany(x => x.Characters).Select(y => y.Name).Except(this.CharactersSelected).Distinct().ToList();
        this.GamesAvailable = this.SceneDtos.Select(x => x.Game.Name).Except(this.GamesSelected).Distinct().ToList();
        this.MusicAvailable = this.SceneDtos.SelectMany(x => x.Music).Select(y => y.Name).Except(this.MusicSelected).Distinct().ToList();
        this.ScenesAvailable = this.SceneDtos.Select(x => x.Name).Except(this.ScenesSelected).Distinct().ToList();
        this.WorldsAvailable = this.SceneDtos.SelectMany(x => x.Worlds).Select(y => y.Name).Except(this.WorldsSelected).Distinct().ToList();

        this.AreasAvailable.Sort();
        this.CharactersAvailable.Sort();
        this.MusicAvailable.Sort();
        this.ScenesAvailable.Sort();
        this.WorldsAvailable.Sort();
    }

    private void UpdateTrailerOptions() { }

    private void UpdateInterviewOptions() { }
    #endregion Sub-Option Methods

    public async Task ResetOptions()
    {
        this.Loading = true;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        if (this.CurrentCategory == "Cutscenes")
        {
            await this.ResetSceneOptions();
        }
        else if (this.CurrentCategory == "Trailers")
        {
            await this.ResetTrailerOptions();
        }
        else if (this.CurrentCategory == "Interviews")
        {
            await this.ResetInterviewOptions();
        }

        this.Loading = false;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    #region Sub-ResetOption Methods
    private async Task ResetSceneOptions()
    {
        this.Areas = await context.Areas.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
        this.Characters = await context.Characters.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
        this.Games = await context.Games.AsNoTracking().Where(x => x.Scenes.Any()).OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();
        this.Music = await context.Music.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
        this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Worlds = await context.Worlds.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();

        this.AreasAvailable = this.Areas;
        this.CharactersAvailable = this.Characters;
        this.GamesAvailable = this.Games;
        this.MusicAvailable = this.Music;
        this.ScenesAvailable = this.Scenes;
        this.WorldsAvailable = this.Worlds;

        this.AreasAvailable.Sort();
        this.CharactersAvailable.Sort();
        this.MusicAvailable.Sort();
        this.ScenesAvailable.Sort();
        this.WorldsAvailable.Sort();

        this.GamesSelected = new List<string>();
        this.ScenesSelected = new List<string>();
        this.WorldsSelected = new List<string>();
        this.AreasSelected = new List<string>();
        this.CharactersSelected = new List<string>();
        this.MusicSelected = new List<string>();

        if (this.GamesSearch != null)
            await this.GamesSearch.SetCurrentView("Available");

        if (this.ScenesSearch != null)
            await this.ScenesSearch.SetCurrentView("Available");

        if (this.WorldsSearch != null)
            await this.WorldsSearch.SetCurrentView("Available");

        if (this.AreasSearch != null)
            await this.AreasSearch.SetCurrentView("Available");

        if (this.CharactersSearch != null)
            await this.CharactersSearch.SetCurrentView("Available");

        if (this.MusicSearch != null)
            await this.MusicSearch.SetCurrentView("Available");
    }

    private async Task ResetTrailerOptions()
    {
        this.Areas = await context.Areas.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Characters = await context.Characters.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Games = await context.Games.AsNoTracking().OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();
        this.Music = await context.Music.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Worlds = await context.Worlds.AsNoTracking().Select(x => x.Name).ToListAsync();
    }

    private async Task ResetInterviewOptions()
    {
        this.Areas = await context.Areas.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Characters = await context.Characters.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Games = await context.Games.AsNoTracking().OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();
        this.Music = await context.Music.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.Worlds = await context.Worlds.AsNoTracking().Select(x => x.Name).ToListAsync();
    }
    #endregion Sub-ResetOption Methods

    public async Task ClearAllOptions(string clearString)
    {
        if (this.CurrentCategory == "Cutscenes")
        {
            await this.ClearAllSceneOptions(clearString);
        }
        else if (this.CurrentCategory == "Trailers")
        {
            await this.ClearAllTrailerOptions(clearString);
        }
        else if (this.CurrentCategory == "Interviews")
        {
            await this.ClearAllInterviewOptions(clearString);
        }

        await this.Search();
    }

    #region Clear All Sub-Methods
    private async Task ClearAllSceneOptions(string clearString)
    {
        if (clearString == "Games")
        {
            this.Games = await context.Games.AsNoTracking().Where(x => x.Scenes.Any()).OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();

            this.GamesAvailable = this.Games;
            this.GamesSelected = new List<string>();

            if (this.GamesSearch != null)
            {
                await this.GamesSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Scenes")
        {
            this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
            this.Scenes.Sort();

            this.ScenesAvailable = this.Scenes;
            this.ScenesSelected = new List<string>();

            if (this.ScenesSearch != null)
            {
                await this.ScenesSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Worlds")
        {
            this.Worlds = await context.Worlds.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.Worlds.Sort();

            this.WorldsAvailable = this.Worlds;
            this.WorldsSelected = new List<string>();

            if (this.WorldsSearch != null)
            {
                await this.WorldsSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Areas")
        {
            this.Areas = await context.Areas.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.Areas.Sort();

            this.AreasAvailable = this.Areas;
            this.AreasSelected = new List<string>();

            if (this.AreasSearch != null)
            {
                await this.AreasSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Characters")
        {
            this.Characters = await context.Characters.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.Characters.Sort();

            this.CharactersAvailable = this.Characters;
            this.CharactersSelected = new List<string>();

            if (this.CharactersSearch != null)
            {
                await this.CharactersSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Music")
        {
            this.Music = await context.Music.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.Music.Sort();

            this.MusicAvailable = this.Music;
            this.MusicSelected = new List<string>();

            if (this.MusicSearch != null)
            {
                await this.MusicSearch.SetCurrentView("Available");
            }
        }
        else
        {
            await this.ResetOptions();
        }
    }

    private async Task ClearAllTrailerOptions(string clearString)
    {
        await this.ResetOptions();
    }

    private async Task ClearAllInterviewOptions(string clearString) 
    { 
        await this.ResetOptions();
    }
    #endregion Clear All Sub-Methods

    public async Task GenerateShareLink()
    {
        try
        {
            if (this.CurrentCategory == "Cutscenes")
            {
                await this.GenerateSceneShareLink();
            }
            else if (this.CurrentCategory == "Trailers")
            {
                await this.GenerateTrailerShareLink();
            }
            else if (this.CurrentCategory == "Interviews")
            {
                await this.GenerateInterviewShareLink();
            }
        }
        catch (Exception)
        {
            // Catch potential issue when trying to access disposed object
        }

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    #region Generate Share Link Sub-Methods
    private async Task GenerateSceneShareLink()
    {
        var shareLink = $"{NavigationManager.BaseUri}memory_archive?";

        if (this.CharactersSelected.Count > 0)
        {
            shareLink += string.Join("&", this.CharactersSelected.Select(x => $"character={this.context.Characters.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.AreasSelected.Count > 0)
        {
            shareLink += string.Join("&", this.AreasSelected.Select(x => $"area={this.context.Areas.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.GamesSelected.Count > 0)
        {
            shareLink += string.Join("&", this.GamesSelected.Select(x => $"game={this.context.Games.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.MusicSelected.Count > 0)
        {
            shareLink += string.Join("&", this.MusicSelected.Select(x => $"music={this.context.Music.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.ScenesSelected.Count > 0)
        {
            shareLink += string.Join("&", this.ScenesSelected.Select(x => $"scene={this.context.Scenes.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.WorldsSelected.Count > 0)
        {
            shareLink += string.Join("&", this.WorldsSelected.Select(x => $"world={this.context.Worlds.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        shareLink += "category=Scenes&";
        shareLink += $"open_row={this.MainSceneTable?.CurrentExpandedRow}";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);

        if (this.MainSceneTable != null)
        {
            toastService.ShowInfo($"Copied link to '{this.context.Scenes.FirstOrDefault(x => x.Id == this.MainSceneTable.CurrentExpandedRow)?.Name}' scene.");
        }
    }

    private async Task GenerateTrailerShareLink()
    {
        var shareLink = $"{NavigationManager.BaseUri}memory_archive?";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);
    }

    private async Task GenerateInterviewShareLink()
    {
        var shareLink = $"{NavigationManager.BaseUri}memory_archive?";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);
    }
    #endregion Generate Share Link Sub-Methods

    public async Task<bool> HandleQueryParams()
    {
        var optionUpdated = false;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });

        try
        {
            if (this.CategoryQuery != null)
            {
                switch (this.CategoryQuery)
                {
                    case "Scenes":
                        this.CurrentCategory = "Cutscenes";
                        break;
                    case "Trailer":
                        this.CurrentCategory = "Trailers";
                        break;
                    case "Interview":
                        this.CurrentCategory = "Interviews";
                        break;
                    default:
                        this.CurrentCategory = this.CategoryQuery;
                        break;
                }

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }

            if (this.CurrentCategory == "Cutscenes")
            {
                optionUpdated = await this.HandleSceneQueryParams();
            }
            else if (this.CurrentCategory == "Trailers")
            {
                optionUpdated = this.HandleTrailerQueryParams();
            }
            else if (this.CurrentCategory == "Interviews")
            {
                optionUpdated = this.HandleInterviewQueryParams();
            }

            if (optionUpdated)
            {
                await this.Search();
            }
        }
        catch(Exception)
        {
            //this.failed = true;
        }

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        return optionUpdated;
    }

    #region Handle Query Params Sub-Methods
    private async Task<bool> HandleSceneQueryParams()
    {
        var optionUpdated = false;

        if (this.AreaQuery != null && this.AreaQuery.Count() > 0 && this.AreasSearch != null)
        {
            var areaIds = this.AreaQuery.Select(x => int.Parse(x));

            this.AreasSelected = this.context.Areas.AsNoTracking().Where(x => areaIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.AreasSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.CharacterQuery != null && this.CharacterQuery.Count() > 0 && this.CharactersSearch != null)
        {
            var characterIds = this.CharacterQuery.Select(x => int.Parse(x));

            this.CharactersSelected = this.context.Characters.AsNoTracking().Where(x => characterIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.CharactersSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.GameQuery != null && this.GameQuery.Count() > 0 && this.GamesSearch != null)
        {
            var gameIds = this.GameQuery.Select(x => int.Parse(x));

            this.GamesSelected = this.context.Games.AsNoTracking().Where(x => gameIds.Contains(x.Id)).OrderBy(x => x.Id).Select(x => x.Name).ToList();
            await this.GamesSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.MusicQuery != null && this.MusicQuery.Count() > 0 && this.MusicSearch != null)
        {
            var musicIds = this.MusicQuery.Select(x => int.Parse(x));

            this.MusicSelected = this.context.Music.AsNoTracking().Where(x => musicIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.MusicSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.SceneQuery != null && this.SceneQuery.Count() > 0 && this.ScenesSearch != null)
        {
            var sceneIds = this.SceneQuery.Select(x => int.Parse(x));

            this.ScenesSelected = this.context.Scenes.AsNoTracking().Where(x => sceneIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.ScenesSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.WorldQuery != null && this.WorldQuery.Count() > 0 && this.WorldsSearch != null)
        {
            var worldIds = this.WorldQuery.Select(x => int.Parse(x));

            this.WorldsSelected = this.context.Worlds.AsNoTracking().Where(x => worldIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.WorldsSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.CategoryQuery != null)
        {
            this.CurrentCategory = this.CategoryQuery;
        }

        return optionUpdated;
    }

    private bool HandleTrailerQueryParams() { return false; }

    private bool HandleInterviewQueryParams() { return false; }
    #endregion Handle Query Params Sub-Methods

    #region Scene Specific Methods
    public void NavigateToDailyCutscene()
    {
        try
        {
            var dateCode = DateTime.Now.ToString("yyyyMMdd");
            var sceneId = this.context.DailyCutscenes.FirstOrDefault(cutscene => cutscene.DateCode == dateCode)?.SceneId;
            var scene = this.context.Scenes.AsNoTracking()
                .Include(s => s.Characters).Include(s => s.Areas).Include(s => s.Game).Include(s => s.Music).Include(s => s.Worlds)
                .FirstOrDefault(s => s.Id == sceneId);

            if (scene == null)
            {
                return;
            }

            var dailyLink = $"{NavigationManager.BaseUri}memory_archive?";

            dailyLink += string.Join("&", scene.Characters.Select(x => $"character={x.Id}")) + "&";
            dailyLink += string.Join("&", scene.Areas.Select(x => $"area={x.Id}")) + "&";
            dailyLink += $"game={scene.Game.Id}&";
            dailyLink += string.Join("&", scene.Music.Select(x => $"music={x.Id}")) + "&";
            dailyLink += $"scene={scene.Id}&";
            dailyLink += string.Join("&", scene.Worlds.Select(x => $"world={x.Id}")) + "&";
            dailyLink += "category=Scenes&";
            dailyLink += $"open_row={scene.Id}";

            NavigationManager.NavigateTo(dailyLink, true);
        }
        catch (Exception)
        {

        }
    }

    public void NavigateToRandomCutscene()
    {
        try
        {
            Random random = new Random((int)DateTime.Now.Ticks);
            var randomSceneId = random.Next(0, this.context.Scenes.Count());
            var scene = this.context.Scenes.AsNoTracking()
                .Include(s => s.Characters).Include(s => s.Areas).Include(s => s.Game).Include(s => s.Music).Include(s => s.Worlds)
                .FirstOrDefault(s => s.Id == randomSceneId);

            if (scene == null)
            {
                return;
            }

            var randomLink = $"{NavigationManager.BaseUri}memory_archive?";

            randomLink += string.Join("&", scene.Characters.Select(x => $"character={x.Id}")) + "&";
            randomLink += string.Join("&", scene.Areas.Select(x => $"area={x.Id}")) + "&";
            randomLink += $"game={scene.Game.Id}&";
            randomLink += string.Join("&", scene.Music.Select(x => $"music={x.Id}")) + "&";
            randomLink += $"scene={scene.Id}&";
            randomLink += string.Join("&", scene.Worlds.Select(x => $"world={x.Id}")) + "&"; 
            randomLink += "category=Scenes&";
            randomLink += $"open_row={scene.Id}";

            NavigationManager.NavigateTo(randomLink, true);
        }
        catch (Exception)
        {
            
        }
    }
    #endregion Scene Specific Methods
}