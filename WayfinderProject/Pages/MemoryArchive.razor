@page "/memory_archive"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@inject NavigationManager NavigationManager

@inject IJSRuntime JS
@inject IToastService toastService


@using Microsoft.EntityFrameworkCore
@using WayfinderProject.Data
@using WayfinderProjectAPI.Data
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers

<PageTitle>The Wayfinder Project - Memory Archive</PageTitle>

<br/>
<br/>

<div class="wayfinder-background">
    <div class="wayfinder-parallax">
        <div class="row" style="width: 100%; margin: 0px 0px 30px 0px">
            <div class="col-md-12" style="align-self: center;">
                <div class="wayfinder-title">
                    <img src="/images/wayfinder_project_title.png" />
                </div>

                <div class="wayfinder-description">
                    <strong>Search for a <span style="color: #522aff;">Word</span>, <span style="color: #ff7519;">Phrase</span> or <span style="color: #2cce78;">Quote</span>...</strong>
                </div>

                <div class="wayfinder-search">
                    <span class="wayfinder-search-icon material-icons">search</span>
                    <input id="main-search" name="main-search" class="custom-input" value="@this.quoteSearch" @onchange="@(async (ChangeEventArgs e) => { this.quoteSearch = e?.Value?.ToString() ?? string.Empty; await this.SearchQuotes(this.quoteSearch); })" placeholder="Start Typing...">
                    <span class="wayfinder-general-icon material-icons" style="right: 195px;" onclick="@(() => this.OpenSettings())">settings</span>
                    <span class="wayfinder-general-icon material-icons" style="right: 185px;" onclick="@(() => this.OpenHistory())">history</span>
                    <button class="wayfinder-search-button" onclick="@(() => this.SearchQuotes(this.quoteSearch))">Search</button>
                </div>

                <div class="wayfinder-sub-description">
                    <strong>
                        Or use a combination of filters below to search through <span style="color: #949dff;">Games</span>, <span style="color: #e685da;">Scenes</span>, <span style="color: #ea4a4a;">Worlds</span>
                        , <span style="color: #5499fc;">Areas</span>, <span style="color: #f3b222;">Characters</span> and <span style="color: #a13bfb;">Music</span>.
                    </strong>
                </div>
            </div>
        </div>

        <hr />

        <div class="row" style="width: 100%; margin: 0px 0px 30px 0px">
            <div class="col-md-1"></div>

            <div class="col-md-4" style="text-align: center;">
                <div class="wayfinder-title">
                    <strong><span style="color: #522aff;">Cutscene of the Day</span></strong>
                </div>

                <div class="wayfinder-alt-description">
                    <strong>
                        Discover a brand new daily cutscene by visiting The Wayfinder Project everyday! Follow <a href="https://twitter.com/WFP_KH" target="_blank">@@WFP_KH on Twitter</a>!
                    </strong>
                </div>

                <br />

                <button class="wayfinder-button" onclick="@(() => this.NavigateToDailyCutscene())" @onclick:stopPropagation>Daily Cutscene</button>
            </div>

            <div class="col-md-2"></div>

            <div class="col-md-4" style="text-align: center;">
                <div class="wayfinder-title">
                    <strong><span style="color: #ea4a4a;">Random</span> <span style="color: #2cce78;">Cutscene</span> <span style="color: #5499fc;">Generator</span></strong>
                </div>

                <div class="wayfinder-alt-description">
                    <strong>
                        Can't decide which scene you want to find? Let us choose for you by selecting a random scene!
                    </strong>
                </div>

                <br />

                <button class="wayfinder-button" onclick="@(() => this.NavigateToRandomCutscene())" @onclick:stopPropagation>Random Cutscene</button>
            </div>

            <div class="col-md-1"></div>
        </div>
    </div>
</div>


<div style="display: inline-flex;">
    <div class="">

        <NavBar @ref="WayfinderNavBar" Categories="this.categories" UpdateCurrentCategory="@(async (string category) => await UpdateCurrentCategory(category))" CurrentCategory="@this.CurrentCategory" Loading="@this.Loading" />
        
    </div>

    <div class="wayfinder-search-alt">
        <span class="wayfinder-search-icon material-icons">search</span>
        <input id="main-search" name="main-search" class="custom-input" value="@this.quoteSearch" onchange="@(async (ChangeEventArgs e) => { this.quoteSearch = e?.Value?.ToString() ?? string.Empty; await this.SearchQuotes(this.quoteSearch); })" placeholder="Start Typing...">
        <span class="wayfinder-general-icon material-icons" style="right: 195px;" onclick="@(() => this.OpenSettings())">settings</span>
        <span class="wayfinder-general-icon material-icons" style="right: 185px;" onclick="@(() => this.OpenHistory())">history</span>
        <button class="wayfinder-search-button" onclick="@(() => this.SearchQuotes(this.quoteSearch))">Search</button>
    </div>
</div>

<SubNavBar @ref="WayfinderSubNavBar" FocusOption="@this.options.FirstOrDefault()" Options="this.options" UpdateCurrentOption="@(async (string option) => await UpdateCurrentOption(option))" StartingOption="@this.CurrentOption" />

@if (this.CurrentCategory == "Cutscenes")
{
    <div id="scenes-search" class="advanced-search-box">
        <div class="row">
            <div class="col-md-12">
                <SearchComponent @ref="SceneGamesSearch" Id="Games" Placeholder="Start Typing..." Color="#cdd1ff" Initial="this.SceneGames" Selected="this.SceneGamesSelected" Available="this.SceneGamesAvailable" 
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="ScenesSearch" Id="Scenes" Placeholder="Start Typing..." Color="#e685da" Initial="this.Scenes" Selected="this.ScenesSelected" Available="this.ScenesAvailable" 
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="SceneWorldsSearch" Id="Worlds" Placeholder="Start Typing..." Color="#ea4a4a" Initial="this.SceneWorlds" Selected="this.SceneWorldsSelected" Available="this.SceneWorldsAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="SceneAreasSearch" Id="Areas" Placeholder="Start Typing..." Color="#5499fc" Initial="this.SceneAreas" Selected="this.SceneAreasSelected" Available="this.SceneAreasAvailable"
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="SceneCharactersSearch" Id="Characters" Placeholder="Start Typing..." Color="#f3b222" Initial="this.SceneCharacters" Selected="this.SceneCharactersSelected" Available="this.SceneCharactersAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="SceneMusicSearch" Id="Music" Placeholder="Start Typing..." Color="#a13bfb" Initial="this.SceneMusic" Selected="this.SceneMusicSelected" Available="this.SceneMusicAvailable"
                                CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                                UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />
            </div>
        </div>
    </div>
}
else if (this.CurrentCategory == "Trailers")
{
    <div id="scenes-search" class="advanced-search-box">
        <div class="row">
            <div class="col-md-12">
                @*<SearchComponent @ref="GamesSearch" Id="Games" Placeholder="Start Typing..." Color="#cdd1ff" Initial="this.Games" Selected="this.GamesSelected" Available="this.GamesAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="ScenesSearch" Id="Scenes" Placeholder="Start Typing..." Color="#e685da" Initial="this.Scenes" Selected="this.ScenesSelected" Available="this.ScenesAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="WorldsSearch" Id="Worlds" Placeholder="Start Typing..." Color="#ea4a4a" Initial="this.Worlds" Selected="this.WorldsSelected" Available="this.WorldsAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="AreasSearch" Id="Areas" Placeholder="Start Typing..." Color="#5499fc" Initial="this.Areas" Selected="this.AreasSelected" Available="this.AreasAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="CharactersSearch" Id="Characters" Placeholder="Start Typing..." Color="#f3b222" Initial="this.Characters" Selected="this.CharactersSelected" Available="this.CharactersAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="MusicSearch" Id="Music" Placeholder="Start Typing..." Color="#a13bfb" Initial="this.Music" Selected="this.MusicSelected" Available="this.MusicAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />*@
            </div>
        </div>
    </div>
}
else if (this.CurrentCategory == "Interviews")
{
    <div id="scenes-search" class="advanced-search-box">
        <div class="row">
            <div class="col-md-12">
                <SearchComponent @ref="InterviewsSearch" Id="Interviews" Placeholder="Start Typing..." Color="#e685da" Initial="this.Interviews" Selected="this.InterviewsSelected" Available="this.InterviewsAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="InterviewGamesSearch" Id="Games" Placeholder="Start Typing..." Color="#cdd1ff" Initial="this.InterviewGames" Selected="this.InterviewGamesSelected" Available="this.InterviewGamesAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />
                             
                <SearchComponent @ref="InterviewParticipantsSearch" Id="Participants" Placeholder="Start Typing..." Color="#f3b222" Initial="this.InterviewParticipants" Selected="this.InterviewParticipantsSelected" Available="this.InterviewParticipantsAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="InterviewProvidersSearch" Id="Providers" Placeholder="Start Typing..." Color="#ea4a4a" Initial="this.InterviewProviders" Selected="this.InterviewProvidersSelected" Available="this.InterviewProvidersAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />

                <SearchComponent @ref="InterviewTranslatorsSearch" Id="Translators" Placeholder="Start Typing..." Color="#5499fc" Initial="this.InterviewTranslators" Selected="this.InterviewTranslatorsSelected" Available="this.InterviewTranslatorsAvailable"
                             CanSearch="!this.Loading" CurrentOption="@this.CurrentOption" CanShowClearAll="@this.canDisplayClearAll"
                             UpdateSearch="@(async () => await Search())" ClearAllMethod="@(async (clearString) => await ClearAllOptions(clearString))" />
            </div>
        </div>
    </div>
}

<br />
<br />

@if (this.Loading)
{
    <div class="row" style="justify-content: center;">
        <div class="loader col-md-12"></div>
    </div>
}
else if (this.CurrentCategory == "Cutscenes" && this.SceneDtos.Count > 0)
{
    <SceneTable @ref="MainSceneTable" Items="this.SceneDtos" Context="Scene" OpenRowQuery="this.OpenRow">
        <TableHeader>
            <th style="text-align: left;"></th>
            <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Game</label></th>
            <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Scene</label></th>
            <th><img src="/images/icons/worlds_gray.png" class="header-margins"> <label class="header-label">Worlds</label></th>
            <th><img src="/images/icons/areas_gray.png" class="header-margins"> <label class="header-label">Areas</label></th>
            <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Characters</label></th>
            <th><img src="/images/icons/music_gray.png" class="header-margins"> <label class="header-label">Music</label></th>
            <th style="text-align: right;"></th>
        </TableHeader>
        <RowTemplate>
            <SceneTableRow Scene="@Scene" MainTable="@MainSceneTable" 
                FavoriteCallbackMethod="@(() => this.SetFavorite("Scenes", Scene.Id))" IsFavorite="@(this.IsFavoriteForUser("Scenes", Scene.Id))"
                ProjectCallbackMethod="@(() => this.OpenProjectModal("Scenes", Scene.Id))" IsProject="@(this.IsProjectForUser("Scenes", Scene.Id))" />
        </RowTemplate>
        <ExpandedRowTemplate>
            <SceneTableExpandedRow Scene="@Scene" API="@this.api" GenerateShareLink="@(async () => await GenerateShareLink())" />
        </ExpandedRowTemplate>
    </SceneTable>
}
else if (this.CurrentCategory == "Trailers")
{
    
}
else if (this.CurrentCategory == "Interviews" && this.InterviewDtos.Count > 0)
{
    <InterviewTable @ref="MainInterviewTable" Items="this.InterviewDtos" Context="Interview" OpenRowQuery="this.OpenRow">
        <TableHeader>
            <th style="text-align: left;"></th>
            <th><img src="/images/icons/scenes_gray.png" class="header-margins"> <label class="header-label">Interview</label></th>
            <th><img src="/images/icons/games_gray.png" class="header-margins"> <label class="header-label">Games</label></th>
            <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Participants</label></th>
            <th><img src="/images/icons/worlds_gray.png" class="header-margins"> <label class="header-label">Provider</label></th>
            <th><img src="/images/icons/characters_gray.png" class="header-margins"> <label class="header-label">Translator</label></th>
            <th style="text-align: right;"></th>
        </TableHeader>
        <RowTemplate>
            <InterviewTableRow Interview="@Interview" MainTable="@MainInterviewTable" 
                FavoriteCallbackMethod="@(() => this.SetFavorite("Interviews", Interview.Id))" IsFavorite="@(this.IsFavoriteForUser("Interviews", Interview.Id))"
                ProjectCallbackMethod="@(() => this.OpenProjectModal("Interviews", Interview.Id))" IsProject="@(this.IsProjectForUser("Interviews", Interview.Id))" />
        </RowTemplate>
        <ExpandedRowTemplate>
            <InterviewTableExpandedRow Interview="@Interview" API="@this.api" GenerateShareLink="@(async () => await GenerateShareLink())" />
        </ExpandedRowTemplate>
    </InterviewTable>
}

<span style="margin-bottom: 50px;"></span>


<style>
.advanced-search-box {
    margin-top: 10px;
    padding: 0px 15px 15px 25px;
    border-radius: 30px;
    width: 100%;
    height: auto;
    background-color: #f1f1f1;
}

.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public bool Loading { get; set; }
    public string CurrentCategory { get; set; } = "Cutscenes";
    public string CurrentOption { get; set; } = "Games";
    public string CurrentSubOption { get; set; } = "Details";

    private string quoteSearch = "";
    private WayfinderController? api;

    #region Query Parameters
    [Parameter]
    [SupplyParameterFromQuery(Name = "text")]
    public string[]? TextQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "area")]
    public string[]? AreaQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "character")]
    public string[]? CharacterQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "game")]
    public string[]? GameQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "music")]
    public string[]? MusicQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "scene")]
    public string[]? SceneQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "world")]
    public string[]? WorldQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "interview")]
    public string[]? InterviewQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "participant")]
    public string[]? ParticipantQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "provider")]
    public string[]? ProviderQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "translator")]
    public string[]? TranslatorQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "open_row")]
    public int OpenRow { get; set; } = -1;

    [Parameter]
    [SupplyParameterFromQuery(Name = "category")]
    public string? CategoryQuery { get; set; }
    #endregion Query Parameters

    private List<string> categories = new List<string> { "Cutscenes", "Interviews" }; //"Trailers",
    private NavBar? WayfinderNavBar;

    private List<string> options = new List<string> { "Scenes", "Games", "Worlds", "Areas", "Characters", "Music" };
    private SubNavBar? WayfinderSubNavBar;

    private bool canDisplayClearAll;

    #region Scene Variables
    private List<SceneDto> SceneDtos = new List<SceneDto>();

    public List<string> SceneAreas { get; set; } = new List<string>();
    public List<string> SceneCharacters { get; set; } = new List<string>();
    public List<string> SceneGames { get; set; } = new List<string>();
    public List<string> SceneMusic { get; set; } = new List<string>();
    public List<string> Scenes { get; set; } = new List<string>();
    public List<string> SceneWorlds { get; set; } = new List<string>();


    #region Scecne Search Variables
    private SearchComponent? SceneAreasSearch;
    private List<string> SceneAreasSelected = new List<string>();
    private List<string> SceneAreasAvailable = new List<string>();

    private SearchComponent? SceneCharactersSearch;
    private List<string> SceneCharactersSelected = new List<string>();
    private List<string> SceneCharactersAvailable = new List<string>();

    private SearchComponent? SceneGamesSearch;
    private List<string> SceneGamesSelected = new List<string>();
    private List<string> SceneGamesAvailable = new List<string>();

    private SearchComponent? SceneMusicSearch;
    private List<string> SceneMusicSelected = new List<string>();
    private List<string> SceneMusicAvailable = new List<string>();

    private SearchComponent? ScenesSearch;
    private List<string> ScenesSelected = new List<string>();
    private List<string> ScenesAvailable = new List<string>();

    private SearchComponent? SceneWorldsSearch;
    private List<string> SceneWorldsSelected = new List<string>();
    private List<string> SceneWorldsAvailable = new List<string>();
    #endregion Scene Search Variables

    private SceneTable<SceneDto>? MainSceneTable;
    #endregion Scene Variables

    #region Interview Variables
    private List<InterviewDto> InterviewDtos = new List<InterviewDto>();

    public List<string> Interviews { get; set; } = new List<string>();
    public List<string> InterviewGames { get; set; } = new List<string>();
    public List<string> InterviewParticipants { get; set; } = new List<string>();
    public List<string> InterviewProviders { get; set; } = new List<string>();
    public List<string> InterviewTranslators { get; set; } = new List<string>();


    #region Interview Search Variables
    private SearchComponent? InterviewsSearch;
    private List<string> InterviewsSelected = new List<string>();
    private List<string> InterviewsAvailable = new List<string>();

    private SearchComponent? InterviewGamesSearch;
    private List<string> InterviewGamesSelected = new List<string>();
    private List<string> InterviewGamesAvailable = new List<string>();

    private SearchComponent? InterviewParticipantsSearch;
    private List<string> InterviewParticipantsSelected = new List<string>();
    private List<string> InterviewParticipantsAvailable = new List<string>();

    private SearchComponent? InterviewProvidersSearch;
    private List<string> InterviewProvidersSelected = new List<string>();
    private List<string> InterviewProvidersAvailable = new List<string>();

    private SearchComponent? InterviewTranslatorsSearch;
    private List<string> InterviewTranslatorsSelected = new List<string>();
    private List<string> InterviewTranslatorsAvailable = new List<string>();
    #endregion Interview Search Variables

    private InterviewTable<InterviewDto>? MainInterviewTable;
    #endregion Interview Variables

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private List<ProjectRecordDto> ProjectRecords = new List<ProjectRecordDto>();
    private List<FavoriteDto> Favourites = new List<FavoriteDto>();
    private SearchSettingsDto SearchSettings = default!;

    private bool failed = false;

    private bool isPatron;
    private int favouriteCount = 200;

    private int limitToNotify = 25;
    private int currentNotifyCount = 0;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var authState = await authenticationStateTask;

            //if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
            //{
            //    NavigationManager.NavigateTo("/Identity/Account/Login", true);
            //}

            // Set Patron Status
            if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
            {
                WayfinderProjectUser user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);

                if (!string.IsNullOrEmpty(user.PatreonAccessToken) && !string.IsNullOrEmpty(user.PatreonRefreshToken))
                {
                    var patreonService = new PatreonService(new HttpClient());

                    try
                    {
                        this.isPatron = await patreonService.IsPatron(context, user.Id);
                    }
                    catch (Exception)
                    {
                        await patreonService.RefreshToken(context, user.Id);

                        this.isPatron = await patreonService.IsPatron(context, user.Id);
                    }
                }

                this.favouriteCount = this.isPatron ? 650 : 200;
            }
        }

        this.api = new WayfinderController(context);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (this.authenticationStateTask != null)
            {
                var authState = await authenticationStateTask;

                if (authState.User.Identity == null || !authState.User.Identity.IsAuthenticated)
                {
                    var options = new ModalOptions { Class = "login-modal-custom" };

                    var modal = Modal.Show<LoginModal>("Log In", new ModalParameters(), options);
                    var temp = await modal.Result;

                    if (temp.Cancelled)
                    {
                        NavigationManager.NavigateTo("/");
                    }
                }
            }

            try
            {
                await this.ResetOptions();

                if (this.authenticationStateTask != null && this.api != null && !this.Loading)
                {
                    var authState = await authenticationStateTask;

                    WayfinderProjectUser user = new();
                    if (authState.User.Identity != null)
                    {
                        user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
                    }

                    this.Favourites = await this.api.GetFavourites(user.Id, "Memory Archive");
                    this.ProjectRecords = (await this.api.GetProjects(user.Id)).SelectMany(x => x.ProjectRecords).ToList();
                    this.SearchSettings = await this.api.GetSearchSettings(user.Id);

                    await this.HandleQueryParams();
                }
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
                this.failed = true;

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }
        }

        if (this.failed)
        {
            try
            {
                Thread.Sleep(1000);

                await this.ResetOptions();

                if (this.authenticationStateTask != null && this.api != null && !this.Loading)
                {
                    var authState = await authenticationStateTask;

                    WayfinderProjectUser user = new();
                    if (authState.User.Identity != null)
                    {
                        user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
                    }

                    this.Favourites = await this.api.GetFavourites(user.Id, "Memory Archive");
                    this.ProjectRecords = (await this.api.GetProjects(user.Id)).SelectMany(x => x.ProjectRecords).ToList();
                    this.SearchSettings = await this.api.GetSearchSettings(user.Id);

                    Thread.Sleep(1000);

                    await this.HandleQueryParams();
                }
            }
            catch (Exception)
            {
                // Catch the SqliteException, do not set firstLoad to true
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task UpdateCurrentCategory(string category)
    {
        if (this.Loading) return;

        this.CurrentCategory = category;

        if (this.CurrentCategory == "Cutscenes")
        {
            this.options = new List<string> { "Scenes", "Games", "Worlds", "Areas", "Characters", "Music" };
        }
        else if (this.CurrentCategory == "Trailers")
        {
            this.options = new List<string>();
        }
        else if (this.CurrentCategory == "Interviews")
        {
            this.options = new List<string> { "Interviews", "Games", "Participants", "Providers", "Translators" };
        }

        await this.Search();

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task UpdateCurrentOption(string option)
    {
        this.CurrentOption = option;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public async Task SearchQuotes(string search)
    {
        if (search.Length < 3)
            this.quoteSearch = "";
        else
            this.quoteSearch = search;


        if (!this.Loading)
        {
            await this.Search(true);
        }
    }

    public async Task Search(bool allowSearch = false)
    {
        this.Loading = true;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        if (this.CurrentCategory == "Cutscenes")
        {
            await this.SearchScenes(allowSearch);
        }
        else if (this.CurrentCategory == "Trailers")
        {
            this.SearchTrailers(allowSearch);
        }
        else if (this.CurrentCategory == "Interviews")
        {
            await this.SearchInterviews(allowSearch);
        }

        this.Loading = false;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    #region Sub-Search Methods
    private async Task SearchScenes(bool allowSearch = false)
    {
        var games = this.SceneGamesSearch != null ? string.Join("::", this.SceneGamesSelected) != "" ? string.Join("::", this.SceneGamesSelected) : null : null;
        var scenes = this.ScenesSearch != null ? string.Join("::", this.ScenesSelected) != "" ? string.Join("::", this.ScenesSelected) : null : null;
        var worlds = this.SceneWorldsSearch != null ? string.Join("::", this.SceneWorldsSelected) != "" ? string.Join("::", this.SceneWorldsSelected) : null : null;
        var areas = this.SceneAreasSearch != null ? string.Join("::", this.SceneAreasSelected) != "" ? string.Join("::", this.SceneAreasSelected) : null : null;
        var characters = this.SceneCharactersSearch != null ? string.Join("::", this.SceneCharactersSelected) != "" ? string.Join("::", this.SceneCharactersSelected) : null : null;
        var music = this.SceneMusicSearch != null ? string.Join("::", this.SceneMusicSelected) != "" ? string.Join("::", this.SceneMusicSelected) : null : null;
        var line = this.quoteSearch != "" ? this.quoteSearch : null;

        // TODO Remove this after we add in the pagination limiter?
        if (games == null && scenes == null && worlds == null && areas == null && characters == null && music == null && line == null)
        {
            this.SceneDtos = new List<SceneDto>();

            await Task.Run(async () => await this.ResetSceneOptions());

            this.canDisplayClearAll = false;
        }
        else if (this.authenticationStateTask != null && this.api != null)
        {
            if (this.SearchSettings.AutoSearch || allowSearch)
            {
                var authState = await this.authenticationStateTask;

                WayfinderProjectUser user = new();
                if (authState.User.Identity != null)
                {
                    user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
                }

                // Maybe use the above to only call the search function we want to based on what's filled out and not null
                if (user.ApiCallQuota > 0 || this.isPatron)
                {
                    this.SceneDtos = await this.api.GetScenes(accountId: user.Id, games: games, scenes: scenes, worlds: worlds, areas: areas, characters: characters, music: music, line: line);

                    if (!this.isPatron)
                    {
                        user.ApiCallQuota -= 1;
                        context.SaveChanges();

                        if (user.ApiCallQuota == 2500)
                        {
                            toastService.ShowInfo("Used half of API Quota (2500/5000). Become a Patron to remove this limit.");
                        }
                        else if (user.ApiCallQuota == 500)
                        {
                            toastService.ShowInfo("Used almost all of API Quota (500/5000). This resets at the start of each month, or is removed if you become a Patron.");
                        }
                        else if (user.ApiCallQuota == 0)
                        {
                            toastService.ShowInfo("Used all of API Quota (0/5000). This resets at the start of each month, or is removed if you become a Patron.");
                        }
                    }

                    // Notify if we meet our threshold
                    ++this.currentNotifyCount;
                    if (this.currentNotifyCount == this.limitToNotify)
                    {
                        this.currentNotifyCount = 0;

                        toastService.ShowInfo("Using The Wayfinder Project for a project? Consider mentioning us in your references!");
                    }
                }
                else
                {
                    // TOAST: Out of API Call Quota, resets monthly.
                    toastService.ShowError("Reached max calls of API Quota (5000/5000). This resets at the start of each month, or is removed if you become a Patron.");
                }
            }

            this.UpdateSceneOptions((this.SearchSettings.AutoSearch || allowSearch));

            this.canDisplayClearAll = true;
        }

        if (MainSceneTable != null)
        {
            MainSceneTable.SetCurrentPage(1);
            MainSceneTable.CurrentExpandedRow = -1;

            if (this.SearchSettings.AutoExpandFirstResult)
            {
                this.MainSceneTable.CurrentExpandedRow = this.SceneDtos.FirstOrDefault()?.Id ?? -1;
            }
        }
    }

    private void SearchTrailers(bool allowSearch = false)
    {
        // Include game, worlds, areas, characters, music

        //var games = this.GamesSearch != null ? string.Join("::", this.GamesSelected) != "" ? string.Join("::", this.GamesSelected) : null : null;
        //var trailers = string.Empty; //this.ScenesSearch != null ? string.Join("::", this.ScenesSelected) != "" ? string.Join("::", this.ScenesSelected) : null : null;
        //var worlds = this.WorldsSearch != null ? string.Join("::", this.WorldsSelected) != "" ? string.Join("::", this.WorldsSelected) : null : null;
        //var areas = this.AreasSearch != null ? string.Join("::", this.AreasSelected) != "" ? string.Join("::", this.AreasSelected) : null : null;
        //var characters = this.CharactersSearch != null ? string.Join("::", this.CharactersSelected) != "" ? string.Join("::", this.CharactersSelected) : null : null;
        //var music = this.MusicSearch != null ? string.Join("::", this.MusicSelected) != "" ? string.Join("::", this.MusicSelected) : null : null;
        //var line = this.quoteSearch != "" ? this.quoteSearch : null;

        //// TODO Remove this after we add in the pagination limiter?
        //if (games == null && trailers == null && worlds == null && areas == null && characters == null && music == null && line == null)
        //{
        //    //this.SceneDtos = new List<SceneDto>();

        //    await Task.Run(async () => await this.ResetTrailerOptions());

        //    this.canDisplayClearAll = false;
        //}
    }

    private async Task SearchInterviews(bool allowSearch = false)
    {
        // Include translators, interviewers, interviewees, date, link, game

        var interviews = this.InterviewsSearch != null ? string.Join("::", this.InterviewsSelected) != "" ? string.Join("::", this.InterviewsSelected) : null : null;
        var games = this.InterviewGamesSearch != null ? string.Join("::", this.InterviewGamesSelected) != "" ? string.Join("::", this.InterviewGamesSelected) : null : null;
        var participants = this.InterviewParticipantsSearch != null ? string.Join("::", this.InterviewParticipantsSelected) != "" ? string.Join("::", this.InterviewParticipantsSelected) : null : null;
        var providers = this.InterviewProvidersSearch != null ? string.Join("::", this.InterviewProvidersSelected) != "" ? string.Join("::", this.InterviewProvidersSelected) : null : null;
        var translators = this.InterviewTranslatorsSearch != null ? string.Join("::", this.InterviewTranslatorsSelected) != "" ? string.Join("::", this.InterviewTranslatorsSelected) : null : null;
        var line = this.quoteSearch != "" ? this.quoteSearch : null;

        // TODO Remove this after we add in the pagination limiter?
        if (interviews == null && games == null && participants == null && providers == null && translators == null && line == null)
        {
            this.InterviewDtos = new List<InterviewDto>();

            await Task.Run(async () => await this.ResetInterviewOptions());

            this.canDisplayClearAll = false;
        }
        else if (this.authenticationStateTask != null && this.api != null)
        {
            if (this.SearchSettings.AutoSearch || allowSearch)
            {
                var authState = await this.authenticationStateTask;

                WayfinderProjectUser user = new();
                if (authState.User.Identity != null)
                {
                    user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
                }

                if (user.ApiCallQuota > 0 || this.isPatron)
                {
                    this.InterviewDtos = await this.api.GetInterviews(accountId: user.Id, interviews: interviews, games: games, participants: participants, providers: providers, translators: translators, line: line);

                    if (!this.isPatron)
                    {
                        user.ApiCallQuota -= 1;
                        context.SaveChanges();

                        if (user.ApiCallQuota == 2500)
                        {
                            toastService.ShowInfo("Used half of API Quota (2500/5000).");
                        }
                        else if (user.ApiCallQuota == 500)
                        {
                            toastService.ShowInfo("Used almost all of API Quota (500/5000). This resets at the start of each month.");
                        }
                        else if (user.ApiCallQuota == 0)
                        {
                            toastService.ShowInfo("Used all of API Quota (0/5000). This resets at the start of each month.");
                        }
                    }

                    // Notify if we meet our threshold
                    ++this.currentNotifyCount;
                    if (this.currentNotifyCount == this.limitToNotify)
                    {
                        this.currentNotifyCount = 0;

                        toastService.ShowInfo("Using The Wayfinder Project for a project? Consider mentioning us in your references!");
                    }
                }
                else
                {
                    // TOAST: Out of API Call Quota, resets monthly.
                    toastService.ShowError("Reached max calls of API Quota (5000/5000). This resets at the start of each month.");
                }
            }

            this.UpdateInterviewOptions((this.SearchSettings.AutoSearch || allowSearch));


            this.canDisplayClearAll = true;
        }

        if (MainInterviewTable != null)
        {
            MainInterviewTable.SetCurrentPage(1);
            MainInterviewTable.CurrentExpandedRow = -1;

            if (this.SearchSettings.AutoExpandFirstResult)
            {
                this.MainInterviewTable.CurrentExpandedRow = this.InterviewDtos.FirstOrDefault()?.Id ?? -1;
            }
        }
    }
    #endregion Sub-Search Methods

    public void UpdateOptions()
    {
        if (this.CurrentCategory == "Cutscenes")
        {
            this.UpdateSceneOptions(this.SearchSettings.AutoSearch);
        }
        else if (this.CurrentCategory == "Trailers")
        {
            this.UpdateTrailerOptions(this.SearchSettings.AutoSearch);
        }
        else if (this.CurrentCategory == "Interviews")
        {
            this.UpdateInterviewOptions(this.SearchSettings.AutoSearch);
        }
    }

    #region Sub-Option Methods
    private void UpdateSceneOptions(bool allowSearch = true)
    {
        if (allowSearch)
        {
            this.SceneAreasAvailable = this.SceneDtos.SelectMany(x => x.Areas).Select(y => y.Name).Except(this.SceneAreasSelected).Distinct().ToList();
            this.SceneCharactersAvailable = this.SceneDtos.SelectMany(x => x.Characters).Select(y => y.Name).Except(this.SceneCharactersSelected).Distinct().ToList();
            this.SceneGamesAvailable = this.SceneDtos.Select(x => x.Game).OrderBy(x => x.Id).Select(x => x.Name).Except(this.SceneGamesSelected).Distinct().ToList();
            this.SceneMusicAvailable = this.SceneDtos.SelectMany(x => x.Music).Select(y => y.Name).Except(this.SceneMusicSelected).Distinct().ToList();
            this.ScenesAvailable = this.SceneDtos.Select(x => x.Name).Except(this.ScenesSelected).Distinct().ToList();
            this.SceneWorldsAvailable = this.SceneDtos.SelectMany(x => x.Worlds).Select(y => y.Name).Except(this.SceneWorldsSelected).Distinct().ToList();
        }
        else
        {
            this.SceneAreasAvailable = this.SceneAreas.Except(this.SceneAreasSelected).Distinct().ToList();
            this.SceneCharactersAvailable = this.SceneCharacters.Except(this.SceneCharactersSelected).Distinct().ToList();
            this.SceneGamesAvailable = this.SceneGames.Except(this.SceneGamesSelected).Distinct().ToList();
            this.SceneMusicAvailable = this.SceneMusic.Except(this.SceneMusicSelected).Distinct().ToList();
            this.ScenesAvailable = this.Scenes.Except(this.ScenesSelected).Distinct().ToList();
            this.SceneWorldsAvailable = this.SceneWorlds.Except(this.SceneWorldsSelected).Distinct().ToList();
        }

        this.SceneAreasAvailable.Sort();
        this.SceneCharactersAvailable.Sort();
        this.SceneMusicAvailable.Sort();
        this.ScenesAvailable.Sort();
        this.SceneWorldsAvailable.Sort();
    }

    private void UpdateTrailerOptions(bool allowSearch = true) { }

    private void UpdateInterviewOptions(bool allowSearch = true)
    {
        if (allowSearch)
        {
            this.InterviewGamesAvailable = this.InterviewDtos.SelectMany(x => x.Games).OrderBy(x => x.Id).Select(x => x.Name).Except(this.SceneGamesSelected).Distinct().ToList();
            this.InterviewsAvailable = this.InterviewDtos.Select(x => x.Name).Except(this.InterviewsSelected).Distinct().ToList();
            this.InterviewParticipantsAvailable = this.InterviewDtos.SelectMany(x => x.Participants).Select(y => y.Name).Except(this.InterviewParticipantsSelected).Distinct().ToList();
            this.InterviewProvidersAvailable = this.InterviewDtos.Select(y => y.Provider.Name).Except(this.InterviewProvidersSelected).Distinct().ToList();
            this.InterviewTranslatorsAvailable = this.InterviewDtos.Select(y => y.Translator.Name).Except(this.InterviewTranslatorsSelected).Distinct().ToList();
        }
        else
        {
            this.InterviewGamesAvailable = this.InterviewGames.Except(this.SceneGamesSelected).Distinct().ToList();
            this.InterviewsAvailable = this.Interviews.Except(this.InterviewsSelected).Distinct().ToList();
            this.InterviewParticipantsAvailable = this.InterviewParticipants.Except(this.InterviewParticipantsSelected).Distinct().ToList();
            this.InterviewProvidersAvailable = this.InterviewProviders.Except(this.InterviewProvidersSelected).Distinct().ToList();
            this.InterviewTranslatorsAvailable = this.InterviewTranslators.Except(this.InterviewTranslatorsSelected).Distinct().ToList();
        }

        this.InterviewsAvailable.Sort();
        this.InterviewParticipantsAvailable.Sort();
        this.InterviewProvidersAvailable.Sort();
        this.InterviewTranslatorsAvailable.Sort();
    }
    #endregion Sub-Option Methods

    public async Task ResetOptions()
    {
        this.Loading = true;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        if (this.CurrentCategory == "Cutscenes")
        {
            await this.ResetSceneOptions();
        }
        else if (this.CurrentCategory == "Trailers")
        {
            this.ResetTrailerOptions();
        }
        else if (this.CurrentCategory == "Interviews")
        {
            await this.ResetInterviewOptions();
        }

        this.Loading = false;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    #region Sub-ResetOption Methods
    private async Task ResetSceneOptions()
    {
        this.SceneAreas = await context.Areas.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
        this.SceneCharacters = await context.Characters.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
        this.SceneGames = await context.Games.AsNoTracking().Where(x => x.Scenes.Any()).OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();
        this.SceneMusic = await context.Music.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
        this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.SceneWorlds = await context.Worlds.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();

        this.SceneAreasAvailable = this.SceneAreas;
        this.SceneCharactersAvailable = this.SceneCharacters;
        this.SceneGamesAvailable = this.SceneGames;
        this.SceneMusicAvailable = this.SceneMusic;
        this.ScenesAvailable = this.Scenes;
        this.SceneWorldsAvailable = this.SceneWorlds;

        this.SceneAreasAvailable.Sort();
        this.SceneCharactersAvailable.Sort();
        this.SceneMusicAvailable.Sort();
        this.ScenesAvailable.Sort();
        this.SceneWorldsAvailable.Sort();

        this.SceneGamesSelected = new List<string>();
        this.ScenesSelected = new List<string>();
        this.SceneWorldsSelected = new List<string>();
        this.SceneAreasSelected = new List<string>();
        this.SceneCharactersSelected = new List<string>();
        this.SceneMusicSelected = new List<string>();

        if (this.SceneGamesSearch != null)
            await this.SceneGamesSearch.SetCurrentView("Available");

        if (this.ScenesSearch != null)
            await this.ScenesSearch.SetCurrentView("Available");

        if (this.SceneWorldsSearch != null)
            await this.SceneWorldsSearch.SetCurrentView("Available");

        if (this.SceneAreasSearch != null)
            await this.SceneAreasSearch.SetCurrentView("Available");

        if (this.SceneCharactersSearch != null)
            await this.SceneCharactersSearch.SetCurrentView("Available");

        if (this.SceneMusicSearch != null)
            await this.SceneMusicSearch.SetCurrentView("Available");
    }

    private void ResetTrailerOptions()
    {
        //this.Areas = await context.Areas.AsNoTracking().Select(x => x.Name).ToListAsync();
        //this.Characters = await context.Characters.AsNoTracking().Select(x => x.Name).ToListAsync();
        //this.Games = await context.Games.AsNoTracking().OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();
        //this.Music = await context.Music.AsNoTracking().Select(x => x.Name).ToListAsync();
        //this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
        //this.Worlds = await context.Worlds.AsNoTracking().Select(x => x.Name).ToListAsync();
    }

    private async Task ResetInterviewOptions()
    {
        this.Interviews = await context.Interviews.AsNoTracking().Select(x => x.Name).ToListAsync();
        this.InterviewGames = await context.Interviews.AsNoTracking().SelectMany(x => x.Games).Select(x => x.Name).Distinct().ToListAsync();
        this.InterviewParticipants = await context.Interviews.AsNoTracking().SelectMany(x => x.Participants).Select(x => x.Name).Distinct().ToListAsync();
        this.InterviewProviders = await context.Interviews.AsNoTracking().Select(x => x.Provider.Name).Distinct().ToListAsync();
        this.InterviewTranslators = await context.Interviews.AsNoTracking().Select(x => x.Translator.Name).Distinct().ToListAsync();

        this.InterviewsAvailable = this.Interviews;
        this.InterviewGamesAvailable = this.InterviewGames;
        this.InterviewParticipantsAvailable = this.InterviewParticipants;
        this.InterviewProvidersAvailable = this.InterviewProviders;
        this.InterviewTranslatorsAvailable = this.InterviewTranslators;

        this.InterviewsAvailable.Sort();
        this.InterviewParticipantsAvailable.Sort();
        this.InterviewProvidersAvailable.Sort();
        this.InterviewTranslatorsAvailable.Sort();

        this.InterviewsSelected = new List<string>();
        this.InterviewGamesSelected = new List<string>();
        this.InterviewParticipantsSelected = new List<string>();
        this.InterviewProvidersSelected = new List<string>();
        this.InterviewTranslatorsSelected = new List<string>();

        if (this.InterviewsSearch != null)
            await this.InterviewsSearch.SetCurrentView("Available");

        if (this.InterviewGamesSearch != null)
            await this.InterviewGamesSearch.SetCurrentView("Available");

        if (this.InterviewParticipantsSearch != null)
            await this.InterviewParticipantsSearch.SetCurrentView("Available");

        if (this.InterviewProvidersSearch != null)
            await this.InterviewProvidersSearch.SetCurrentView("Available");

        if (this.InterviewTranslatorsSearch != null)
            await this.InterviewTranslatorsSearch.SetCurrentView("Available");
    }
    #endregion Sub-ResetOption Methods

    public async Task ClearAllOptions(string clearString)
    {
        if (this.CurrentCategory == "Cutscenes")
        {
            await this.ClearAllSceneOptions(clearString);
        }
        else if (this.CurrentCategory == "Trailers")
        {
            await this.ClearAllTrailerOptions(clearString);
        }
        else if (this.CurrentCategory == "Interviews")
        {
            await this.ClearAllInterviewOptions(clearString);
        }

        await this.Search();
    }

    #region Clear All Sub-Methods
    private async Task ClearAllSceneOptions(string clearString)
    {
        if (clearString == "Games")
        {
            this.SceneGames = await context.Games.AsNoTracking().Where(x => x.Scenes.Any()).OrderBy(x => x.Id).Select(x => x.Name).ToListAsync();

            this.SceneGamesAvailable = this.SceneGames;
            this.SceneGamesSelected = new List<string>();

            if (this.SceneGamesSearch != null)
            {
                await this.SceneGamesSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Scenes")
        {
            this.Scenes = await context.Scenes.AsNoTracking().Select(x => x.Name).ToListAsync();
            this.Scenes.Sort();

            this.ScenesAvailable = this.Scenes;
            this.ScenesSelected = new List<string>();

            if (this.ScenesSearch != null)
            {
                await this.ScenesSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Worlds")
        {
            this.SceneWorlds = await context.Worlds.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.SceneWorlds.Sort();

            this.SceneWorldsAvailable = this.SceneWorlds;
            this.SceneWorldsSelected = new List<string>();

            if (this.SceneWorldsSearch != null)
            {
                await this.SceneWorldsSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Areas")
        {
            this.SceneAreas = await context.Areas.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.SceneAreas.Sort();

            this.SceneAreasAvailable = this.SceneAreas;
            this.SceneAreasSelected = new List<string>();

            if (this.SceneAreasSearch != null)
            {
                await this.SceneAreasSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Characters")
        {
            this.SceneCharacters = await context.Characters.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.SceneCharacters.Sort();

            this.SceneCharactersAvailable = this.SceneCharacters;
            this.SceneCharactersSelected = new List<string>();

            if (this.SceneCharactersSearch != null)
            {
                await this.SceneCharactersSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Music")
        {
            this.SceneMusic = await context.Music.AsNoTracking().Where(x => x.Scenes.Any()).Select(x => x.Name).ToListAsync();
            this.SceneMusic.Sort();

            this.SceneMusicAvailable = this.SceneMusic;
            this.SceneMusicSelected = new List<string>();

            if (this.SceneMusicSearch != null)
            {
                await this.SceneMusicSearch.SetCurrentView("Available");
            }
        }
        else
        {
            await this.ResetOptions();
        }
    }

    private async Task ClearAllTrailerOptions(string clearString)
    {
        await this.ResetOptions();
    }

    private async Task ClearAllInterviewOptions(string clearString) 
    { 
        if (clearString == "Interviews")
        {
            this.Interviews = await context.Interviews.AsNoTracking().Select(x => x.Name).ToListAsync();
            this.Interviews.Sort();

            this.InterviewsAvailable = this.Interviews;
            this.InterviewsSelected = new List<string>();

            if (this.InterviewsSearch != null)
            {
                await this.InterviewsSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Games")
        {
            this.InterviewGames = await context.Interviews.AsNoTracking().SelectMany(x => x.Games).Select(x => x.Name).ToListAsync();

            this.InterviewGamesAvailable = this.InterviewGames;
            this.InterviewGamesSelected = new List<string>();

            if (this.InterviewGamesSearch != null)
            {
                await this.InterviewGamesSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Participants")
        {
            this.InterviewParticipants = await context.Interviews.AsNoTracking().SelectMany(x => x.Participants).Select(x => x.Name).Distinct().ToListAsync();
            this.InterviewParticipants.Sort();

            this.InterviewParticipantsAvailable = this.InterviewParticipants;
            this.InterviewParticipantsSelected = new List<string>();

            if (this.InterviewParticipantsSearch != null)
            {
                await this.InterviewParticipantsSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Providers")
        {
            this.InterviewProviders = await context.Interviews.AsNoTracking().Select(x => x.Provider.Name).Distinct().ToListAsync();
            this.InterviewProviders.Sort();

            this.InterviewProvidersAvailable = this.InterviewProviders;
            this.InterviewProvidersSelected = new List<string>();

            if (this.InterviewProvidersSearch != null)
            {
                await this.InterviewProvidersSearch.SetCurrentView("Available");
            }
        }
        else if (clearString == "Translators")
        {
            this.InterviewTranslators = await context.Interviews.AsNoTracking().Select(x => x.Translator.Name).Distinct().ToListAsync();
            this.InterviewTranslators.Sort();

            this.InterviewTranslatorsAvailable = this.InterviewTranslators;
            this.InterviewTranslatorsSelected = new List<string>();

            if (this.InterviewTranslatorsSearch != null)
            {
                await this.InterviewTranslatorsSearch.SetCurrentView("Available");
            }
        }
        else
        {
            await this.ResetOptions();
        }
    }
    #endregion Clear All Sub-Methods

    public async Task GenerateShareLink()
    {
        try
        {
            if (this.CurrentCategory == "Cutscenes")
            {
                await this.GenerateSceneShareLink();
            }
            else if (this.CurrentCategory == "Trailers")
            {
                await this.GenerateTrailerShareLink();
            }
            else if (this.CurrentCategory == "Interviews")
            {
                await this.GenerateInterviewShareLink();
            }
        }
        catch (Exception)
        {
            // Catch potential issue when trying to access disposed object
        }

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    #region Generate Share Link Sub-Methods
    private async Task GenerateSceneShareLink()
    {
        var shareLink = $"{NavigationManager.BaseUri}memory_archive?";

        if (this.SceneCharactersSelected.Count > 0)
        {
            shareLink += string.Join("&", this.SceneCharactersSelected.Select(x => $"character={this.context.Characters.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.SceneAreasSelected.Count > 0)
        {
            shareLink += string.Join("&", this.SceneAreasSelected.Select(x => $"area={this.context.Areas.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.SceneGamesSelected.Count > 0)
        {
            shareLink += string.Join("&", this.SceneGamesSelected.Select(x => $"game={this.context.Games.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.SceneMusicSelected.Count > 0)
        {
            shareLink += string.Join("&", this.SceneMusicSelected.Select(x => $"music={this.context.Music.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.ScenesSelected.Count > 0)
        {
            shareLink += string.Join("&", this.ScenesSelected.Select(x => $"scene={this.context.Scenes.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.SceneWorldsSelected.Count > 0)
        {
            shareLink += string.Join("&", this.SceneWorldsSelected.Select(x => $"world={this.context.Worlds.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        shareLink += "category=Scenes&";
        shareLink += $"open_row={this.MainSceneTable?.CurrentExpandedRow}";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);

        if (this.MainSceneTable != null)
        {
            toastService.ShowInfo($"Copied link to '{this.context.Scenes.FirstOrDefault(x => x.Id == this.MainSceneTable.CurrentExpandedRow)?.Name}' scene.");
        }
    }

    private async Task GenerateTrailerShareLink()
    {
        var shareLink = $"{NavigationManager.BaseUri}memory_archive?";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);
    }

    private async Task GenerateInterviewShareLink()
    {
        var shareLink = $"{NavigationManager.BaseUri}memory_archive?";

        if (this.InterviewsSelected.Count > 0)
        {
            shareLink += string.Join("&", this.InterviewsSelected.Select(x => $"interview={this.context.Interviews.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.InterviewGamesSelected.Count > 0)
        {
            shareLink += string.Join("&", this.InterviewGamesSelected.Select(x => $"game={this.context.Games.AsNoTracking().FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.InterviewParticipantsSelected.Count > 0)
        {
            shareLink += string.Join("&", this.InterviewParticipantsSelected.Select(x => $"participant={this.context.Interviews.AsNoTracking().SelectMany(y => y.Participants).FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.InterviewProvidersSelected.Count > 0)
        {
            shareLink += string.Join("&", this.InterviewProvidersSelected.Select(x => $"provider={this.context.Interviews.AsNoTracking().Select(x => x.Provider).FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        if (this.InterviewTranslatorsSelected.Count > 0)
        {
            shareLink += string.Join("&", this.InterviewTranslatorsSelected.Select(x => $"translator={this.context.Interviews.AsNoTracking().Select(x => x.Translator).FirstOrDefault(y => y.Name == x)?.Id}")) + "&";
        }

        shareLink += "category=Interviews&";
        shareLink += $"open_row={this.MainInterviewTable?.CurrentExpandedRow}";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);

        if (this.MainInterviewTable != null)
        {
            toastService.ShowInfo($"Copied link to '{this.context.Interviews.FirstOrDefault(x => x.Id == this.MainInterviewTable.CurrentExpandedRow)?.Name}' interview.");
        }
    }
    #endregion Generate Share Link Sub-Methods

    public async Task<bool> HandleQueryParams()
    {
        var optionUpdated = false;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });

        try
        {
            if (this.CategoryQuery != null)
            {
                switch (this.CategoryQuery)
                {
                    case "Scenes":
                        this.CurrentCategory = "Cutscenes";
                        break;
                    case "Trailer":
                        this.CurrentCategory = "Trailers";
                        break;
                    case "Interviews":
                        this.CurrentCategory = "Interviews";
                        break;
                    default:
                        this.CurrentCategory = this.CategoryQuery;
                        break;
                }

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }

            if (this.CurrentCategory == "Cutscenes")
            {
                optionUpdated = await this.HandleSceneQueryParams();
            }
            else if (this.CurrentCategory == "Trailers")
            {
                optionUpdated = this.HandleTrailerQueryParams();
            }
            else if (this.CurrentCategory == "Interviews")
            {
                optionUpdated = await this.HandleInterviewQueryParams();
            }

            if (optionUpdated)
            {
                await this.Search();
            }
        }
        catch(Exception)
        {
            //this.failed = true;
        }

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        return optionUpdated;
    }

    #region Handle Query Params Sub-Methods
    private async Task<bool> HandleSceneQueryParams()
    {
        var optionUpdated = false;

        if (this.TextQuery != null && this.TextQuery.Count() > 0)
        {
            this.quoteSearch = this.TextQuery.First();

            optionUpdated = true;
        }

        if (this.AreaQuery != null && this.AreaQuery.Count() > 0 && this.SceneAreasSearch != null)
        {
            var areaIds = this.AreaQuery.Select(x => int.Parse(x));

            this.SceneAreasSelected = this.context.Areas.AsNoTracking().Where(x => areaIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.SceneAreasSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.CharacterQuery != null && this.CharacterQuery.Count() > 0 && this.SceneCharactersSearch != null)
        {
            var characterIds = this.CharacterQuery.Select(x => int.Parse(x));

            this.SceneCharactersSelected = this.context.Characters.AsNoTracking().Where(x => characterIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.SceneCharactersSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.GameQuery != null && this.GameQuery.Count() > 0 && this.SceneGamesSearch != null)
        {
            var gameIds = this.GameQuery.Select(x => int.Parse(x));

            this.SceneGamesSelected = this.context.Games.AsNoTracking().Where(x => gameIds.Contains(x.Id)).OrderBy(x => x.Id).Select(x => x.Name).ToList();
            await this.SceneGamesSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.MusicQuery != null && this.MusicQuery.Count() > 0 && this.SceneMusicSearch != null)
        {
            var musicIds = this.MusicQuery.Select(x => int.Parse(x));

            this.SceneMusicSelected = this.context.Music.AsNoTracking().Where(x => musicIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.SceneMusicSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.SceneQuery != null && this.SceneQuery.Count() > 0 && this.ScenesSearch != null)
        {
            var sceneIds = this.SceneQuery.Select(x => int.Parse(x));

            this.ScenesSelected = this.context.Scenes.AsNoTracking().Where(x => sceneIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.ScenesSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.WorldQuery != null && this.WorldQuery.Count() > 0 && this.SceneWorldsSearch != null)
        {
            var worldIds = this.WorldQuery.Select(x => int.Parse(x));

            this.SceneWorldsSelected = this.context.Worlds.AsNoTracking().Where(x => worldIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.SceneWorldsSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        return optionUpdated;
    }

    private bool HandleTrailerQueryParams() { return false; }

    private async Task<bool> HandleInterviewQueryParams()
    {
        var optionUpdated = false;

        if (this.TextQuery != null && this.TextQuery.Count() > 0)
        {
            this.quoteSearch = this.TextQuery.First();

            optionUpdated = true;
        }

        if (this.InterviewQuery != null && this.InterviewQuery.Count() > 0 && this.InterviewsSearch != null)
        {
            var interviewIds = this.InterviewQuery.Select(x => int.Parse(x));

            this.InterviewsSelected = this.context.Interviews.AsNoTracking().Where(x => interviewIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.InterviewsSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.GameQuery != null && this.GameQuery.Count() > 0 && this.InterviewGamesSearch != null)
        {
            var gameIds = this.GameQuery.Select(x => int.Parse(x));

            this.InterviewGamesSelected = this.context.Games.AsNoTracking().Where(x => gameIds.Contains(x.Id)).OrderBy(x => x.Id).Select(x => x.Name).ToList();
            await this.InterviewGamesSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.ParticipantQuery != null && this.ParticipantQuery.Count() > 0 && this.InterviewParticipantsSearch != null)
        {
            var participantIds = this.ParticipantQuery.Select(x => int.Parse(x));

            this.InterviewParticipantsSelected = this.context.Interviews.AsNoTracking().SelectMany(x => x.Participants).Where(x => participantIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.InterviewParticipantsSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.ProviderQuery != null && this.ProviderQuery.Count() > 0 && this.InterviewProvidersSearch != null)
        {
            var providerIds = this.ProviderQuery.Select(x => int.Parse(x));

            this.InterviewProvidersSelected = this.context.Interviews.AsNoTracking().Select(x => x.Provider).Where(x => providerIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.InterviewProvidersSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        if (this.TranslatorQuery != null && this.TranslatorQuery.Count() > 0 && this.InterviewTranslatorsSearch != null)
        {
            var translatorIds = this.TranslatorQuery.Select(x => int.Parse(x));

            this.InterviewTranslatorsSelected = this.context.Interviews.AsNoTracking().Select(x => x.Translator).Where(x => translatorIds.Contains(x.Id)).Select(x => x.Name).ToList();
            await this.InterviewTranslatorsSearch.SetCurrentView("Selected");

            optionUpdated = true;
        }

        return optionUpdated;
    }
    #endregion Handle Query Params Sub-Methods

    #region Scene Specific Methods
    public void NavigateToDailyCutscene()
    {
        try
        {
            var dateCode = DateTime.Now.ToString("yyyyMMdd");
            var sceneId = this.context.DailyCutscenes.FirstOrDefault(cutscene => cutscene.DateCode == dateCode)?.SceneId;
            var scene = this.context.Scenes.AsNoTracking()
                .Include(s => s.Characters).Include(s => s.Areas).Include(s => s.Game).Include(s => s.Music).Include(s => s.Worlds)
                .FirstOrDefault(s => s.Id == sceneId);

            if (scene == null)
            {
                return;
            }

            var dailyLink = $"{NavigationManager.BaseUri}memory_archive?";

            dailyLink += string.Join("&", scene.Characters.Select(x => $"character={x.Id}")) + "&";
            dailyLink += string.Join("&", scene.Areas.Select(x => $"area={x.Id}")) + "&";
            dailyLink += $"game={scene.Game.Id}&";
            dailyLink += string.Join("&", scene.Music.Select(x => $"music={x.Id}")) + "&";
            dailyLink += $"scene={scene.Id}&";
            dailyLink += string.Join("&", scene.Worlds.Select(x => $"world={x.Id}")) + "&";
            dailyLink += "category=Scenes&";
            dailyLink += $"open_row={scene.Id}";

            NavigationManager.NavigateTo(dailyLink, true);
        }
        catch (Exception)
        {

        }
    }

    public void NavigateToRandomCutscene()
    {
        try
        {
            Random random = new Random((int)DateTime.Now.Ticks);
            var randomSceneId = random.Next(0, this.context.Scenes.Count());
            var scene = this.context.Scenes.AsNoTracking()
                .Include(s => s.Characters).Include(s => s.Areas).Include(s => s.Game).Include(s => s.Music).Include(s => s.Worlds)
                .FirstOrDefault(s => s.Id == randomSceneId);

            if (scene == null)
            {
                return;
            }

            var randomLink = $"{NavigationManager.BaseUri}memory_archive?";

            randomLink += string.Join("&", scene.Characters.Select(x => $"character={x.Id}")) + "&";
            randomLink += string.Join("&", scene.Areas.Select(x => $"area={x.Id}")) + "&";
            randomLink += $"game={scene.Game.Id}&";
            randomLink += string.Join("&", scene.Music.Select(x => $"music={x.Id}")) + "&";
            randomLink += $"scene={scene.Id}&";
            randomLink += string.Join("&", scene.Worlds.Select(x => $"world={x.Id}")) + "&"; 
            randomLink += "category=Scenes&";
            randomLink += $"open_row={scene.Id}";

            NavigationManager.NavigateTo(randomLink, true);
        }
        catch (Exception)
        {

        }
    }

    public async Task OpenSettings()
    {
        if (this.authenticationStateTask != null && this.api != null && !this.Loading)
        {
            var authState = await this.authenticationStateTask;

            WayfinderProjectUser user = new();
            if (authState.User.Identity != null)
            {
                user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
            }

            var parameters = new ModalParameters();

            parameters.Add("AccountId", user.Id);
            parameters.Add("API", this.api);

            var options = new ModalOptions { Class = "modal-custom" };

            var temp = Modal.Show<SettingsModal>("Search Settings", parameters, options);
            await temp.Result;

            this.SearchSettings = await this.api.GetSearchSettings(user.Id);
        }
    }

    public async Task OpenHistory()
    {
        if (this.authenticationStateTask != null && this.api != null && !this.Loading)
        {
            var authState = await this.authenticationStateTask;

            WayfinderProjectUser user = new();
            if (authState.User.Identity != null)
            {
                user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
            }

            var parameters = new ModalParameters();

            parameters.Add("AccountId", user.Id);
            parameters.Add("Type", "Memory Archive");
            parameters.Add("Context", this.context);
            parameters.Add("API", this.api);

            var options = new ModalOptions { Class = "modal-custom" };

            Modal.Show<HistoryModal>("Search History", parameters, options);
        }
    }

    public async Task SetFavorite(string category, int specificRecordId)
    {
        if (this.authenticationStateTask != null && this.api != null && !this.Loading)
        {
            var authState = await this.authenticationStateTask;

            WayfinderProjectUser user = new();
            if (authState.User.Identity != null)
            {
                user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
            }

            if (this.Favourites.Select(x => x.SpecificRecordId).Any(x => x == specificRecordId))
            {
                await this.api.InsertRemoveFavourite(user.Id, "Memory Archive", category, specificRecordId);

                this.Favourites = await this.api.GetFavourites(user.Id, "Memory Archive");
            }
            else
            {
                if (this.context.Favorites.Where(x => x.AccountId == user.Id).ToList().Count < favouriteCount)
                {
                    await this.api.InsertRemoveFavourite(user.Id, "Memory Archive", category, specificRecordId);

                    this.Favourites = await this.api.GetFavourites(user.Id, "Memory Archive");
                }
                else
                {
                    var additionalInfo = this.isPatron ? " Become a Patron to increase this to 650." : string.Empty;
                    toastService.ShowError($"Reached max Favourite Quota ({this.favouriteCount}/{this.favouriteCount}).{additionalInfo}");
                }
            }

            await InvokeAsync(() =>
            {
                this.StateHasChanged();
            });
        }
    }

    public bool IsFavoriteForUser(string category, int specificRecordId)
    {
        return this.Favourites.Exists(x => x.Type == "Memory Archive" && x.Category == category && x.SpecificRecordId == specificRecordId);
    }

    public async Task OpenProjectModal(string category, int specificRecordId)
    {
        if (this.authenticationStateTask != null && this.api != null && !this.Loading)
        {
            var authState = await this.authenticationStateTask;

            WayfinderProjectUser user = new();
            if (authState.User.Identity != null)
            {
                user = this.context.Users.First(x => x.UserName == authState.User.Identity.Name);
            }

            var parameters = new ModalParameters();

            parameters.Add("AccountId", user.Id);
            parameters.Add("Type", "Memory Archive");
            parameters.Add("Category", category);
            parameters.Add("SpecificRecordId", specificRecordId);
            parameters.Add("API", this.api);

            var options = new ModalOptions { Class = "modal-custom" };

            var temp = Modal.Show<ProjectModal>($"Projects - {category}", parameters, options);
            await temp.Result;

            this.ProjectRecords = (await this.api.GetProjects(user.Id)).SelectMany(x => x.ProjectRecords).ToList();
        }
    }

    public bool IsProjectForUser(string category, int specificRecordId)
    {
        return this.ProjectRecords.Exists(x => x.Type == "Memory Archive" && x.Category == category && x.SpecificRecordId == specificRecordId);
    }
    #endregion Scene Specific Methods
}