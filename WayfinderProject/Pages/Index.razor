@page "/"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@inject IJSRuntime JS
@inject IToastService toastService


@using Microsoft.EntityFrameworkCore
@using WayfinderProject.Data
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers
@using System.Net.Http.Headers

<PageTitle>The Wayfinder Project</PageTitle>

<br/>
<br/>

<div class="wayfinder-background">
    <div class="row">
        <div class="col-md-6" style="align-self: center;">
            <div class="wayfinder-title">
                <img src="/images/wayfinder_project_title.png" style="float: left;" />
            </div>
        </div>

        <div class="col-md-6" style="align-self: center;">
            <div class="wayfinder-description">
                <span style="text-align: end;">Kingdom Hearts Resource Database</span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="ma-folder">
            <span class="folder-title">Memory Archive</span>

            <div class="folder-container">
                <div class="folder-redirect">
                    <span class="oi oi-chevron-right" style="color: white"></span>
                </div>

                <div class="folder-image" onclick="@(() => NavigationManager.NavigateTo("/memory_archive", true))">
                    <img src="/images/MA.png" style="width: 40vh;" />
                </div>
            </div>

            <div class="folder-content">
                Scour the Memory Archives to find scenes using criteria such as characters or worlds, enjoy the Cutscene of the Day 
                or let us decide for you by selecting a Random Cutscene.
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="jj-folder">
            <span class="folder-title">Jiminy's Journal</span>

            <div class="folder-container">
                <div class="folder-redirect">
                    <span class="oi oi-chevron-right" style="color: white"></span>
                </div>

                <div class="folder-image" onclick="@(() => NavigationManager.NavigateTo("/jiminy_journal", true))">
                    <img src="/images/JJ.png" style="width: 40vh;" />
                </div>
            </div>

            <div class="folder-content">
                Dive into Jiminy's Journal to find all the information stored about characters and more, stay up-to-date with the 
                Entry of the Day or study up on something random by letting Jiminy select a Random Entry.
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="ms-folder">
            <span class="folder-title">Moogle Shop</span>

            <div class="folder-container">
                <div class="folder-redirect">
                    <span class="oi oi-chevron-right" style="color: white"></span>
                </div>

                <div class="folder-image" onclick="@(() => NavigationManager.NavigateTo("/moogle_shop", true))">
                    <img src="/images/MS.png" style="width: 40vh;" />
                </div>
            </div>

            <div class="folder-content">
                Cook up Recipes and find Inventory, with drop-rate information, in the Moogle Shop,
                expand your knowledge with the Record of the Day or let the Moogles show you a Random Record.
            </div>
        </div>
    </div>
</div>


<style>
.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? CodeQuery { get; set; }

    public bool IsPatron { get; set; }

    private PatreonService patreonService = default!;

    protected override async Task OnInitializedAsync()
    {
        if (this.CodeQuery != null && authenticationStateTask != null)
        {
            this.patreonService = new PatreonService(HttpClient);

            AuthenticationState authState = await authenticationStateTask;

            if (authState.User.Identity != null)
            {
                WayfinderProjectUser? user = this.context.Users.FirstOrDefault(x => x.UserName == authState.User.Identity.Name);

                if (user != null && (string.IsNullOrEmpty(user.PatreonAccessToken) || string.IsNullOrEmpty(user.PatreonRefreshToken)))
                {
                    await this.patreonService.GetIdentity(context, user.Id, this.CodeQuery);
                }
            }
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}
