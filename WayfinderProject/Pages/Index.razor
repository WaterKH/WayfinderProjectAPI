@page "/"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@using Microsoft.EntityFrameworkCore
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers

<PageTitle>The Wayfinder Project</PageTitle>

<br/>
<br/>

<div class="wayfinder-background">
    <div class="wayfinder-parallax">
        <div class="row" style="width: 100%; margin: 0px 0px 30px 0px">
            <div class="col-md-12" style="align-self: center;">
                <div class="wayfinder-title">
                    <img src="/images/wayfinder_project_title.png" />
                </div>

                <div class="wayfinder-description">
                    <strong>Search for a <span style="color: #522aff;">Word</span>, <span style="color: #ff7519;">Phrase</span> or <span style="color: #2cce78;">Quote</span>...</strong>
                </div>

                <div class="wayfinder-search">
                    <span class="wayfinder-search-icon material-icons">search</span>
                    <input id="main-search" name="main-search" class="custom-input" onchange="@((ChangeEventArgs e) => { this.quoteSearch = e?.Value?.ToString(); this.SearchQuotes(e?.Value?.ToString()); })" placeholder="Start Typing..." >
                    <button class="wayfinder-search-button" onclick="@(() => this.SearchQuotes(this.quoteSearch))">Search</button>
                </div>
            </div>
        </div>
    </div>
</div>

<NavBar @ref="WayfinderNavBar" Options="this.options" UpdateCurrentOption="@(async (string option) => await UpdateCurrentOption(option))" CustomStyle="@("padding: 30px 15px 0px 15px;")" StartingOption="@this.CurrentOption" />

<div class="advanced-search-box">
    <div class="row">
        <div class="col-md-12">
            <SearchComponent @ref="GamesSearch" Id="Games" Placeholder="Start Typing..." Color="#cdd1ff" Selections="this.Games" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" CurrentOption="@this.CurrentOption" />

            <SearchComponent @ref="ScenesSearch" Id="Scenes" Placeholder="Start Typing..." Color="#e685da" Selections="this.Scenes" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" CurrentOption="@this.CurrentOption" />
                
            <SearchComponent @ref="WorldsSearch" Id="Worlds" Placeholder="Start Typing..." Color="#ffcf2f" Selections="this.Worlds" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" CurrentOption="@this.CurrentOption" />
                
            <SearchComponent @ref="AreasSearch" Id="Areas" Placeholder="Start Typing..." Color="#94ffaa" Selections="this.Areas" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" CurrentOption="@this.CurrentOption" />
                
            <SearchComponent @ref="CharactersSearch" Id="Characters" Placeholder="Start Typing..." Color="#ff6060" Selections="this.Characters" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" CurrentOption="@this.CurrentOption" />
                
            <SearchComponent @ref="MusicSearch" Id="Music" Placeholder="Start Typing..." Color="#78b1d4" Selections="this.Music" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" CurrentOption="@this.CurrentOption" />
        </div>
    </div>
</div>

<br />
<br />

@if (this.Loading)
{
    <div class="row" style="justify-content: center;">
        <div class="loader col-md-12"></div>
    </div>
}
@*else if (this.SceneDtos.Count > 0)
{*@
    <Table @ref="MainTable" Items="this.SceneDtos" Context="Scene">
        <TableHeader>
            <th><img src="/images/icons/crown_gray.png" width="25px" class="header-margins"> <label class="header-label">Game</label></th>
            <th><img src="/images/icons/scene_gray.png" width="25px" class="header-margins"> <label class="header-label">Scene</label></th>
            <th><img src="/images/icons/world_gray.png" width="25px" class="header-margins"> <label class="header-label">Worlds</label></th>
            <th><img src="/images/icons/area_gray.png" width="25px" class="header-margins"> <label class="header-label">Areas</label></th>
            <th><img src="/images/icons/character_gray.png" width="25px" class="header-margins"> <label class="header-label">Characters</label></th>
            <th><img src="/images/icons/music_gray.png" width="25px" class="header-margins"> <label class="header-label">Music</label></th>
            <th style="text-align: right;"></th>
        </TableHeader>
        <RowTemplate>
            <td style="vertical-align: middle;">
                <span style="font-weight: 600;">@Scene.Game.Name</span>
            </td>
            <td style="vertical-align: middle;">
                <a style="font-weight: 600; color: #1a00ff;" href="@Scene.Link" target="_blank">@Scene.Name</a>
            </td>
            <td style="vertical-align: middle;">
                @if (Scene.Worlds.Count > 2)
                {
                    <div style="margin-left: -5px; height: 38px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Worlds.Select(x => x.Name)))">
                            <div class="world-display">
                                Multiple <iconify-icon icon="bi:caret-down-fill" style="margin-left: 7px; margin-bottom: -4px;"></iconify-icon>
                            </div>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Worlds.Count > 0 && Scene.Worlds.First().Name != ":None:")
                    {
                    <div style="display: inline-flex" class="@(Scene.Worlds.Count == 2 ? "world-display" : "")">
                        @for (int i = 0; i < Scene.Worlds.Count; ++i)
                        {
                            <span class="world-color">@Scene.Worlds.ToList()[i].Name</span>
                            if (i < Scene.Worlds.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td style="vertical-align: middle;">
                @if (Scene.Areas.Count > 2)
                {
                    <div style="margin-left: -5px; height: 38px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Areas.Select(x => x.Name)))">
                            <div class="area-display">
                                Multiple <iconify-icon icon="bi:caret-down-fill" style="margin-left: 7px; margin-bottom: -4px;"></iconify-icon>
                            </div>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Areas.Count > 0 && Scene.Areas.First().Name != ":None:")
                    {
                    <div style="display: inline-flex" class="@(Scene.Areas.Count == 2 ? "area-display" : "")">
                        @for (int i = 0; i < Scene.Areas.Count; ++i)
                        {
                            <span class="area-color">@Scene.Areas.ToList()[i].Name</span>
                            if (i < Scene.Areas.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td style="vertical-align: middle;">
                @if (Scene.Characters.Count > 2)
                {
                    <div style="margin-left: -5px; height: 38px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Characters.Select(x => x.Name)))">
                            <div class="character-display">
                                Multiple <iconify-icon icon="bi:caret-down-fill" style="margin-left: 7px; margin-bottom: -4px;"></iconify-icon>
                            </div>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Characters.Count > 0 && Scene.Characters.First().Name != ":None:")
                    {
                    <div style="display: inline-flex" class="@(Scene.Characters.Count == 2 ? "character-display" : "")">
                        @for (int i = 0; i < Scene.Characters.Count; ++i)
                        {
                            <span class="character-color">@Scene.Characters.ToList()[i].Name</span>
                            if (i < Scene.Characters.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td style="vertical-align: middle;">
                @if (Scene.Music.Count > 2)
                {
                    <div style="margin-left: -5px; height: 38px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Music.Select(x => x.Name)))">
                            <div class="music-display">
                                Multiple <iconify-icon icon="bi:caret-down-fill" style="margin-left: 7px; margin-bottom: -4px;"></iconify-icon>
                            </div>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Music.Count > 0 && Scene.Music.First().Name != ":None:")
                    {
                    <div style="display: inline-flex" class="@(Scene.Music.Count == 2 ? "music-display" : "")">
                        @for (int i = 0; i < Scene.Music.Count; ++i)
                        {
                            <a class="music-color" style="color: #1a00ff;" href="@Scene.Music.ToList()[i].Link" target="_blank">@Scene.Music.ToList()[i].Name</a>
                            if (i < Scene.Music.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td style="vertical-align: middle;">
                @if (MainTable.CurrentExpandedRow == Scene.Id)
                {
                    <span class="oi oi-minus mr-1 clickable" @onclick="@(() => MainTable.UpdateExpandedRow(Scene.Id))"></span>
                }
                else
                {
                    <span class="oi oi-plus mr-1 clickable" @onclick="@(() => MainTable.UpdateExpandedRow(Scene.Id))"></span>
                }    
            </td>
        </RowTemplate>
        <ExpandedRowTemplate>
            <tr>
                <td colspan="12" style="background-color: #f1f1f1; border-radius: 50px; padding: 50px;">
                    <div class="row">
                        <div class="col-md-5">
                            <NavBar Options="@(new List<string> { "Details", "Dialogue" })" UpdateCurrentOption="@(async (string option) => await UpdateCurrentSubOption(option))" StartingOption="@this.CurrentSubOption" />

                            @if (this.CurrentSubOption == "Details")
                            {
                            <div style="height: 523px; margin-top: 10px; border-radius: 25px; background-color: #ffffff; padding: 25px;">
                                <div class="row" style="height: 281px;">
                                    <div class="col-md-12">
                                        <h3 class="world-color"><img src="/images/icons/world.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Worlds</h3>
                                        <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Worlds.Select(x => x.Name)))</label><br />
                                    </div>
                                    
                                    <br/>
                                    
                                    <div class="col-md-12" style="margin-top: 25px;">
                                        <h3 class="character-color"><img src="/images/icons/character.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Characters</h3>
                                        <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Characters.Select(x => x.Name)))</label><br />
                                    </div>

                                    <div class="col-md-12" style="margin-top: 25px;">
                                        <h3 class="area-color"><img src="/images/icons/area.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Areas</h3>
                                        <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Areas.Select(x => x.Name)))</label><br />
                                    </div>

                                    <div class="col-md-12" style="margin-top: 25px;">
                                        <h3 class="music-color"><img src="/images/icons/music.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Music</h3>
                                        <label>
                                            <div style="display: inline-flex;">
                                                @for (int i = 0; i < this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Music.Count; ++i)
                                                {
                                                    var currentScene = this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name);
                                                    <a href="@currentScene.Music.ToList()[i].Link" target="_blank">@currentScene.Music.ToList()[i].Name</a>
                                                    if (i < currentScene.Music.Count - 1)
                                                    {
                                                        <div>,&ensp;</div>
                                                    }
                                                }
                                            </div>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            }
                            else if (this.CurrentSubOption == "Dialogue")
                            {
                            <div style="border-radius: 25px; background-color: #ffffff; padding: 15px; height: 523px; overflow-y: auto; margin-top: 10px;">
                                <Table Items="Scene.Script.Lines.ToList()" Context="Line" CurrentPage="1">
                                    <TableHeader>
                                        <th>Dialogue</th>
                                        <th></th>
                                    </TableHeader>
                                    <RowTemplate>
                                        <td><strong>@Line.Character</strong></td>
                                        <td>@Line.Line</td>
                                    </RowTemplate>
                                </Table>
                            </div>
                            }
                        </div>

                        
                        <div class="col-md-7">
                            <iframe width="1000px" height="563px" src="@(Scene.Link.Replace("watch?v=", "embed/").Split("&list=")[0])"></iframe>
                        </div>
                    </div>
                </td>
            </tr>
        </ExpandedRowTemplate>
    </Table>
@*}*@


<style>
.advanced-search-box {
    margin-top: 10px;
    padding: 0px 15px 15px 25px;
    border-radius: 30px;
    width: 100%;
    height: auto;
    background-color: #f1f1f1;
}

.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

@code {
    public bool Loading { get; set; }
    public string CurrentOption { get; set; } = "Games";
    public string CurrentSubOption { get; set; } = "Details";

    public List<string> Areas { get; set; } = new List<string>();
    public List<string> Characters { get; set; } = new List<string>();
    public List<string> Games { get; set; } = new List<string>();
    public List<string> Music { get; set; } = new List<string>();
    public List<string> Scenes { get; set; } = new List<string>();
    public List<string> Worlds { get; set; } = new List<string>();

    private SearchComponent? AreasSearch;
    private SearchComponent? CharactersSearch;
    private SearchComponent? GamesSearch;
    private SearchComponent? MusicSearch;
    private SearchComponent? ScenesSearch;
    private SearchComponent? WorldsSearch;

    private Table<SceneDto>? MainTable;

    private string quoteSearch = "";
    private List<SceneDto> SceneDtos = new List<SceneDto>();
    private WayfinderController api;

    private List<string> options = new List<string> { "Games", "Scenes", "Worlds", "Areas", "Characters", "Music" };
    private NavBar? WayfinderNavBar;

    protected override async Task OnInitializedAsync()
    {
        this.api = new WayfinderController(null, context);

        await Task.Run(async () => await this.ResetOptions());

        await base.OnInitializedAsync();
    }

    public async Task SearchQuotes(string search)
    {
        if (search.Length < 3)
            this.quoteSearch = "";
        else
            this.quoteSearch = search;


        if (!this.Loading)
        {
            await this.Search();
        }
    }

    public async Task Search()
    {
        try
        {
            this.Loading = true;     
            await InvokeAsync(() => { 
                this.StateHasChanged(); 
            });

            var games = this.GamesSearch != null ? string.Join(", ", this.GamesSearch.selected) != "" ? string.Join(", ", this.GamesSearch.selected) : null : null;
            var scenes = this.ScenesSearch != null ? string.Join(", ", this.ScenesSearch.selected) != "" ? string.Join(", ", this.ScenesSearch.selected) : null : null;
            var worlds = this.WorldsSearch != null ? string.Join(", ", this.WorldsSearch.selected) != "" ? string.Join(", ", this.WorldsSearch.selected) : null : null;
            var areas = this.AreasSearch != null ? string.Join(", ", this.AreasSearch.selected) != "" ? string.Join(", ", this.AreasSearch.selected) : null : null;
            var characters = this.CharactersSearch != null ? string.Join(", ", this.CharactersSearch.selected) != "" ? string.Join(", ", this.CharactersSearch.selected) : null : null;
            var music = this.MusicSearch != null ? string.Join(", ", this.MusicSearch.selected) != "" ? string.Join(", ", this.MusicSearch.selected) : null : null;
            var line = this.quoteSearch != "" ? this.quoteSearch : null;

            // TODO Remove this after we add in the pagination limiter?
            if (games == null && scenes == null && worlds == null && areas == null && characters == null && music == null && line == null)
            {
                this.SceneDtos = new List<SceneDto>();

                await Task.Run(async () => await this.ResetOptions());
            }
            else
            {
                // Maybe use the above to only call the search function we want to based on what's filled out and not null
                await Task.Run(async () => this.SceneDtos = (await this.api.SearchForScenes(games: games, scenes: scenes, worlds: worlds, areas: areas, characters: characters, music: music, line: line)).ToList());

                this.UpdateOptions();
            }

            if (MainTable != null)
            {
                MainTable.CurrentPage = 1;
                MainTable.CurrentExpandedRow = -1;
            }
        }
        finally
        {
            this.Loading = false;
            await InvokeAsync(() => { 
                this.StateHasChanged(); 
            });
        }
    }

    public async Task UpdateCurrentOption(string option)
    {
        this.CurrentOption = option;

        await InvokeAsync(() => {
            this.StateHasChanged();
        });
    }

    public async Task UpdateCurrentSubOption(string option)
    {
        this.CurrentSubOption = option;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public void UpdateOptions()
    {
        this.Areas = this.SceneDtos.SelectMany(x => x.Areas).Select(y => y.Name).Except(this.AreasSearch.selected).Distinct().ToList();
        this.Characters = this.SceneDtos.SelectMany(x => x.Characters).Select(y => y.Name).Except(this.CharactersSearch.selected).Distinct().ToList();
        this.Games = this.SceneDtos.Select(x => x.Game.Name).Except(this.GamesSearch.selected).Distinct().ToList();
        this.Music = this.SceneDtos.SelectMany(x => x.Music).Select(y => y.Name).Except(this.MusicSearch.selected).Distinct().ToList();
        this.Scenes = this.SceneDtos.Select(x => x.Name).Except(this.ScenesSearch.selected).Distinct().ToList();
        this.Worlds = this.SceneDtos.SelectMany(x => x.Worlds).Select(y => y.Name).Except(this.WorldsSearch.selected).Distinct().ToList();

        this.Areas.Sort();
        this.Characters.Sort();
        this.Music.Sort();
        this.Scenes.Sort();
        this.Worlds.Sort();

        this.AreasSearch.Selections = this.AreasSearch.results = this.Areas;
        this.CharactersSearch.Selections = this.CharactersSearch.results = this.Characters;
        this.GamesSearch.Selections = this.GamesSearch.results = this.Games;
        this.MusicSearch.Selections = this.MusicSearch.results = this.Music;
        this.ScenesSearch.Selections = this.ScenesSearch.results = this.Scenes;
        this.WorldsSearch.Selections = this.WorldsSearch.results = this.Worlds;

        InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    public async Task ResetOptions()
    {
        this.Areas = await context.Areas.Select(x => x.Name).ToListAsync();
        this.Characters = await context.Characters.Select(x => x.Name).ToListAsync();
        this.Games = await context.Games.Select(x => x.Name).ToListAsync();
        this.Music = await context.Music.Select(x => x.Name).ToListAsync();
        this.Scenes = await context.Scenes.Select(x => x.Name).ToListAsync();
        this.Worlds = await context.Worlds.Select(x => x.Name).ToListAsync();

        this.Areas.Sort();
        this.Characters.Sort();
        this.Music.Sort();
        this.Scenes.Sort();
        this.Worlds.Sort();

        this.AreasSearch.Selections = this.AreasSearch.results = this.Areas;
        this.CharactersSearch.Selections = this.CharactersSearch.results = this.Characters;
        this.GamesSearch.Selections = this.GamesSearch.results = this.Games;
        this.MusicSearch.Selections = this.MusicSearch.results = this.Music;
        this.ScenesSearch.Selections = this.ScenesSearch.results = this.Scenes;
        this.WorldsSearch.Selections = this.WorldsSearch.results = this.Worlds;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }
}