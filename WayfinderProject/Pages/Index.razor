@page "/"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@using Microsoft.EntityFrameworkCore
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers

<PageTitle>The Wayfinder Project</PageTitle>

<div id="how-to-use">
    <div class="row">
        <div class="col-md-3">
            <img src="/images/WFP_logo.png" alt="The Wayfinder Project" width="100%">
        </div>

        <div class="col-md-9">
            <br/>
            <br/>
            <br/>

            <h3 style="text-align: center;">The Wayfinder Project - How To Use</h3>
            
            <br/>

            <p>
                Welcome to the Wayfinder Project, a directory and database for every cutscene in the Kingdom Hearts series! 
                Over the course of 20+ years and more than 15 titles, the KH series is filled to the brim with over 2,000 cutscenes and thousands of lines of dialogue. 
                The purpose of this database is to help you <strong>find any particular scene, moment, or line from the series</strong> with just a few keystrokes. 
            </p>
            <p>
                For example, if you’re looking for, say, that scene with Xigbar and Zexion in KH2FM, you can enter both characters in the “character” field, and KH2 in the “games” field. 
                This’ll narrow your search down to just two scenes: one with the entire Organization in the throne room, and one with just the two chatting after Vexen runs off in Twilight’s View.
            </p>
            <p>
                Want to know <strong>every time a certain song is used</strong> in the series? Use the “Music” field to search for Rowdy Rumble, Tension Rising, The Other Promise, etc, and you’ll have your answer!
            </p>
            <p>
                Brand new to this version of the Wayfinder Project is the ability to <strong>search any keyword within the games’ dialogue and get every instance of that word or phrase returned</strong>. 
                For example, are you looking for that scene where Donald calls Goofy a big palooka? 
                Search palooka in the topmost field and you’ll be directed to that exact scene, complete with everything else you’d want to know about it: the characters who appear in it, 
                the world and area it takes place in, the music playing, and a transcript of all spoken dialogue in the scene. 
                Embedded in the search result is a link to the scene on YouTube for your convenience. 
            </p>
        </div>
    </div>
</div>

<br/>
<br/>

<Collapsable Title="Search Parameters">
    <div class="search-bar">
        <div class="row" style="width: 100%; margin: 0px 0px 30px 0px">
            <div class="col-md-12" style="align-self: center;">
                <input id="main-search" name="main-search" class="custom-input" onchange="@((ChangeEventArgs e) => this.SearchQuotes(e?.Value?.ToString()))" placeholder="Search for a Word, Phrase or Quote (Must be longer than 3 letters)..." />
            </div>
        </div>
    </div>

    <div class="advanced-search-box">
        <div class="row" >
            <div class="col-md-4">
                <SearchComponent @ref="GamesSearch" Id="Games" Placeholder="Search for Games..." Color="#cdd1ff" Selections="this.Games" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" />
            </div>
            <div class="col-md-4">
                <SearchComponent @ref="WorldsSearch" Id="Worlds" Placeholder="Search for Worlds..." Color="#1bff9f" Selections="this.Worlds" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" />
            </div>
            <div class="col-md-4">
                <SearchComponent @ref="AreasSearch" Id="Areas" Placeholder="Search for Areas..." Color="#94ffe1" Selections="this.Areas" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" />
            </div>
            <div class="col-md-4">
                <SearchComponent @ref="ScenesSearch" Id="Scenes" Placeholder="Search for Scenes..." Color="#faa5f3" Selections="this.Scenes" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" />
            </div>
            <div class="col-md-4">
                <SearchComponent @ref="CharactersSearch" Id="Characters" Placeholder="Search for Characters..." Color="#beff6c" Selections="this.Characters" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" />
            </div>
            <div class="col-md-4">
                <SearchComponent @ref="MusicSearch" Id="Music" Placeholder="Search for Music..." Color="#fffd9c" Selections="this.Music" CanSearch="!this.Loading" UpdateSearch="@(async () => await Search())" />
            </div>
        </div>
    </div>
</Collapsable>

<br />
<br />

@if (this.Loading)
{
    <div class="row" style="justify-content: center;">
        <div class="loader col-md-12"></div>
    </div>
}
else if (this.SceneDtos.Count > 0)
{
    <Table @ref="MainTable" Items="this.SceneDtos" Context="Scene">
        <TableHeader>
            <th>Game</th>
            <th>Scene</th>
            <th>Worlds</th>
            <th>Areas</th>
            <th>Characters</th>
            <th>Music</th>
            <th style="text-align: right;"></th>
        </TableHeader>
        <RowTemplate>
            <td>@Scene.Game.Name</td>
            <td><a href="@Scene.Link" target="_blank">@Scene.Name</a></td>
            <td>
                @if (Scene.Worlds.Count > 2)
                {
                    <div style="margin-left: -5px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Worlds.Select(x => x.Name)))">
                            <em>Multiple</em> <i class="oi oi-info icon"></i>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Worlds.Count > 0 && Scene.Worlds.First().Name != ":None:")
                    {
                    <div style="display: inline-flex">
                        @for (int i = 0; i < Scene.Worlds.Count; ++i)
                        {
                            @Scene.Worlds.ToList()[i].Name
                            if (i < Scene.Worlds.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td>
                @if (Scene.Areas.Count > 2)
                {
                    <div style="margin-left: -5px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Areas.Select(x => x.Name)))">
                            <em>Multiple</em> <i class="oi oi-info icon"></i>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Areas.Count > 0 && Scene.Areas.First().Name != ":None:")
                    {
                    <div style="display: inline-flex">
                        @for (int i = 0; i < Scene.Areas.Count; ++i)
                        {
                            @Scene.Areas.ToList()[i].Name
                            if (i < Scene.Areas.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td>
                @if (Scene.Characters.Count > 2)
                {
                    <div style="margin-left: -5px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Characters.Select(x => x.Name)))">
                            <em>Multiple</em> <i class="oi oi-info icon"></i>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Characters.Count > 0 && Scene.Characters.First().Name != ":None:")
                    {
                    <div style="display: inline-flex">
                        @for (int i = 0; i < Scene.Characters.Count; ++i)
                        {
                            @Scene.Characters.ToList()[i].Name
                            if (i < Scene.Characters.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td>
                @if (Scene.Music.Count > 2)
                {
                    <div style="margin-left: -5px;">
                        <Tooltip Text="@(string.Join(", ", Scene.Music.Select(x => x.Name)))">
                            <em>Multiple</em> <i class="oi oi-info icon"></i>
                        </Tooltip>
                    </div>
                }
                else
                {
                    if (Scene.Music.Count > 0 && Scene.Music.First().Name != ":None:")
                    {
                    <div style="display: inline-flex">
                        @for (int i = 0; i < Scene.Music.Count; ++i)
                        {
                            <a href="@Scene.Music.ToList()[i].Link" target="_blank">@Scene.Music.ToList()[i].Name</a>
                            if (i < Scene.Music.Count - 1)
                            {
                                <div>,&nbsp;</div>
                            }
                        }
                    </div>
                    }
                }
            </td>
            <td>
                @if (MainTable.CurrentExpandedRow == Scene.Id)
                {
                    <span class="oi oi-minus mr-1 clickable" @onclick="@(() => MainTable.UpdateExpandedRow(Scene.Id))"></span>
                }
                else
                {
                    <span class="oi oi-plus mr-1 clickable" @onclick="@(() => MainTable.UpdateExpandedRow(Scene.Id))"></span>
                }    
            </td>
        </RowTemplate>
        <ExpandedRowTemplate>
            <tr>
                <td colspan="6" style="border: #545a60 2px solid;">
                    <strong>Lines & Extra Information:</strong>
                    <br/>
                    <br/>
                    <div class="row">
                        <div class="col-md-1"></div>

                        <div class="col-md-5" style="text-align: left;">
                            <strong stlye="font-size: larger;">Worlds in Scene:</strong>
                            <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Worlds.Select(x => x.Name)))</label><br/>

                            <strong stlye="font-size: larger;">Areas in Scene:</strong>
                            <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Areas.Select(x => x.Name)))</label><br/>
                        </div>
                        
                        <div class="col-md-1"></div>

                        <div class="col-md-5" style="text-align: left;">
                            <strong stlye="font-size: larger;">Characters in Scene:</strong>
                            <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Characters.Select(x => x.Name)))</label><br/>
                    
                            <strong stlye="font-size: larger;">Music in Scene:</strong>
                            <label>
                                <div style="display: inline-flex;">
                                    @for (int i = 0; i < this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Music.Count; ++i)
                                    {
                                        var currentScene = this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name);
                                        <a href="@currentScene.Music.ToList()[i].Link" target="_blank">@currentScene.Music.ToList()[i].Name</a>
                                        if (i < currentScene.Music.Count - 1)
                                        {
                                            <div>,&nbsp;</div>
                                        }
                                    }
                                </div>
                            </label><br/>
                        </div>
                    </div>

                    <hr/>

                    <div class="row">
                        <div class="col-md-12" style="text-align: center;">
                            <iframe width="853px" height="505px" src="@(Scene.Link.Replace("watch?v=", "embed/").Split("&list=")[0])"></iframe>
                        </div>
                    </div>

                    <Table Items="Scene.Script.Lines.ToList()" Context="Line" CurrentPage="1">
                        <TableHeader>
                            <th>Character</th>
                            <th>Line</th>
                        </TableHeader>
                        <RowTemplate>
                            <td><strong>@Line.Character</strong></td>
                            <td>@Line.Line</td>
                        </RowTemplate>
                    </Table>
                </td>
            </tr>
        </ExpandedRowTemplate>
    </Table>
}


<style>
.custom-input {
    padding: 5px 15px;
    border-radius: 50px;
    text-align: left;
    width: 100%;
    height: auto;
    border: 1px solid black;
    overflow-wrap: break-word;
}

.advanced-search-box {
    padding: 5px 15px;
    border-radius: 35px;
    width: 100%;
    border: 1px solid black;
    height: auto;
    background-color: #ffffff;
}

.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

@code {
    public bool Loading { get; set; }

    public List<string> Areas { get; set; } = new List<string>();
    public List<string> Characters { get; set; } = new List<string>();
    public List<string> Games { get; set; } = new List<string>();
    public List<string> Music { get; set; } = new List<string>();
    public List<string> Scenes { get; set; } = new List<string>();
    public List<string> Worlds { get; set; } = new List<string>();

    private SearchComponent? AreasSearch;
    private SearchComponent? CharactersSearch;
    private SearchComponent? GamesSearch;
    private SearchComponent? MusicSearch;
    private SearchComponent? ScenesSearch;
    private SearchComponent? WorldsSearch;

    private Table<SceneDto>? MainTable;

    private string quoteSearch = "";
    private List<SceneDto> SceneDtos = new List<SceneDto>();
    private WayfinderController api;

    protected override async Task OnInitializedAsync()
    {
        this.api = new WayfinderController(null, context);

        await Task.Run(async () => await this.ResetOptions());

        await base.OnInitializedAsync();
    }

    public async Task SearchQuotes(string search)
    {
        if (search.Length < 3)
            this.quoteSearch = "";
        else
            this.quoteSearch = search;


        if (!this.Loading)
        {
            await this.Search();
        }
    }

    public async Task Search()
    {
        try
        {
            this.Loading = true;     
            await InvokeAsync(() => { 
                this.StateHasChanged(); 
            });

            var games = this.GamesSearch != null ? string.Join(", ", this.GamesSearch.selected) != "" ? string.Join(", ", this.GamesSearch.selected) : null : null;
            var scenes = this.ScenesSearch != null ? string.Join(", ", this.ScenesSearch.selected) != "" ? string.Join(", ", this.ScenesSearch.selected) : null : null;
            var worlds = this.WorldsSearch != null ? string.Join(", ", this.WorldsSearch.selected) != "" ? string.Join(", ", this.WorldsSearch.selected) : null : null;
            var areas = this.AreasSearch != null ? string.Join(", ", this.AreasSearch.selected) != "" ? string.Join(", ", this.AreasSearch.selected) : null : null;
            var characters = this.CharactersSearch != null ? string.Join(", ", this.CharactersSearch.selected) != "" ? string.Join(", ", this.CharactersSearch.selected) : null : null;
            var music = this.MusicSearch != null ? string.Join(", ", this.MusicSearch.selected) != "" ? string.Join(", ", this.MusicSearch.selected) : null : null;
            var line = this.quoteSearch != "" ? this.quoteSearch : null;

            // TODO Remove this after we add in the pagination limiter?
            if (games == null && scenes == null && worlds == null && areas == null && characters == null && music == null && line == null)
            {
                this.SceneDtos = new List<SceneDto>();

                await Task.Run(async () => await this.ResetOptions());
            }
            else
            {
                // Maybe use the above to only call the search function we want to based on what's filled out and not null
                await Task.Run(async () => this.SceneDtos = (await this.api.SearchForScenes(games: games, scenes: scenes, worlds: worlds, areas: areas, characters: characters, music: music, line: line)).ToList());

                this.UpdateOptions();
            }

            if (MainTable != null)
            {
                MainTable.CurrentPage = 1;
                MainTable.CurrentExpandedRow = -1;
            }
        }
        finally
        {
            this.Loading = false;
            await InvokeAsync(() => { 
                this.StateHasChanged(); 
            });
        }
    }

    public void UpdateOptions()
    {
        this.Areas = this.SceneDtos.SelectMany(x => x.Areas).Select(y => y.Name).Except(this.AreasSearch.selected).Distinct().ToList();
        this.Characters = this.SceneDtos.SelectMany(x => x.Characters).Select(y => y.Name).Except(this.CharactersSearch.selected).Distinct().ToList();
        this.Games = this.SceneDtos.Select(x => x.Game.Name).Except(this.GamesSearch.selected).Distinct().ToList();
        this.Music = this.SceneDtos.SelectMany(x => x.Music).Select(y => y.Name).Except(this.MusicSearch.selected).Distinct().ToList();
        this.Scenes = this.SceneDtos.Select(x => x.Name).Except(this.ScenesSearch.selected).Distinct().ToList();
        this.Worlds = this.SceneDtos.SelectMany(x => x.Worlds).Select(y => y.Name).Except(this.WorldsSearch.selected).Distinct().ToList();

        this.Areas.Sort();
        this.Characters.Sort();
        this.Music.Sort();
        this.Scenes.Sort();
        this.Worlds.Sort();

        this.AreasSearch.Selections = this.AreasSearch.results = this.Areas;
        this.CharactersSearch.Selections = this.CharactersSearch.results = this.Characters;
        this.GamesSearch.Selections = this.GamesSearch.results = this.Games;
        this.MusicSearch.Selections = this.MusicSearch.results = this.Music;
        this.ScenesSearch.Selections = this.ScenesSearch.results = this.Scenes;
        this.WorldsSearch.Selections = this.WorldsSearch.results = this.Worlds;

        InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    public async Task ResetOptions()
    {
        this.Areas = await context.Areas.Select(x => x.Name).ToListAsync();
        this.Characters = await context.Characters.Select(x => x.Name).ToListAsync();
        this.Games = await context.Games.Select(x => x.Name).ToListAsync();
        this.Music = await context.Music.Select(x => x.Name).ToListAsync();
        this.Scenes = await context.Scenes.Select(x => x.Name).ToListAsync();
        this.Worlds = await context.Worlds.Select(x => x.Name).ToListAsync();

        this.Areas.Sort();
        this.Characters.Sort();
        this.Music.Sort();
        this.Scenes.Sort();
        this.Worlds.Sort();

        this.AreasSearch.Selections = this.AreasSearch.results = this.Areas;
        this.CharactersSearch.Selections = this.CharactersSearch.results = this.Characters;
        this.GamesSearch.Selections = this.GamesSearch.results = this.Games;
        this.MusicSearch.Selections = this.MusicSearch.results = this.Music;
        this.ScenesSearch.Selections = this.ScenesSearch.results = this.Scenes;
        this.WorldsSearch.Selections = this.WorldsSearch.results = this.Worlds;

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }
}