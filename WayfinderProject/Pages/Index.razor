@page "/"
@inject WayfinderProjectAPI.Data.WayfinderContext context
@inject NavigationManager NavigationManager

@inject IJSRuntime JS
@inject IToastService toastService


@using Microsoft.EntityFrameworkCore
@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers

<PageTitle>The Wayfinder Project</PageTitle>

<br/>
<br/>

<div class="wayfinder-background">
    <div class="row">
        <div class="col-md-6" style="align-self: center;">
            <div class="wayfinder-title">
                <img src="/images/wayfinder_project_title.png" style="float: left;" />
            </div>
        </div>

        <div class="col-md-6" style="align-self: center;">
            <div class="wayfinder-description">
                <span style="text-align: end;">Kingdom Hearts Resource Database</span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="ma-folder">
            <span class="folder-title">Memory Archive</span>

            <div class="folder-container">
                <div class="folder-redirect">
                    <span class="oi oi-chevron-right" style="color: white"></span>
                </div>

                <div class="folder-image" onclick="@(() => NavigationManager.NavigateTo("/memory_archive", true))">
                    <img src="/images/MA.png" style="width: 40vh;" />
                </div>
            </div>

            <div class="folder-content">
                Scour the Memory Archives to find scenes using criteria such as characters or worlds, enjoy the Cutscene of the Day 
                or let us decide for you by selecting a Random Cutscene.
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="jj-folder">
            <span class="folder-title">Jiminy's Journal</span>

            <div class="folder-container">
                <div class="folder-redirect">
                    <span class="oi oi-chevron-right" style="color: white"></span>
                </div>

                <div class="folder-image" onclick="@(() => NavigationManager.NavigateTo("/jiminy_journal", true))">
                    <img src="/images/JJ.png" style="width: 40vh;" />
                </div>
            </div>

            <div class="folder-content">
                Dive into Jiminy's Journal to find all the information stored about characters and more, stay up-to-date with the 
                Entry of the Day or study up on something random by letting Jiminy select a Random Entry.
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="ms-folder">
            <span class="folder-title">Moogle Shop</span>

            <div class="folder-container">
                <div class="folder-redirect">
                    <span class="oi oi-chevron-right" style="color: white"></span>
                </div>

                <div class="folder-image" onclick="@(() => NavigationManager.NavigateTo("/moogle_shop", true))">
                    <img src="/images/MS.png" style="width: 40vh;" />
                </div>
            </div>

            <div class="folder-content">
                Cook up Recipes and find Inventory in the Moogle Shop, alongside drop-rate information on synthesis materials, 
                expand your knowledge with the Record of the Day or let the Moogles show you a Random Record.
            </div>
        </div>
    </div>
</div>


<style>
.clickable {
    float: right; 
    font-size: 1rem; 
    color: #3e79a7; 
    margin-top: 3px; 
    cursor: pointer;
}

.icon {
    font-size: .8rem;
    width: 20px;
    height: 20px;
    border: 1px solid black;
    padding: 4px 5px;
    border-radius: 500px;
    background-color: #bee2ff;
}
</style>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task<bool> HandleQueryParams()
    {
        var optionUpdated = false;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });

        try
        {

        }
        catch(Exception)
        {

        }

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });

        return optionUpdated;
    }

    public void NavigateToDailyCutscene()
    {
        try
        {
            var dateCode = DateTime.Now.ToString("yyyyMMdd");
            var sceneId = this.context.DailyCutscenes.First(cutscene => cutscene.DateCode == dateCode).SceneId;
            var scene = this.context.Scenes.AsNoTracking()
                .Include(s => s.Characters).Include(s => s.Areas).Include(s => s.Game).Include(s => s.Music).Include(s => s.Worlds)
                .FirstOrDefault(s => s.Id == sceneId);

            if (scene == null)
            {
                return;
            }

            var dailyLink = $"{NavigationManager.BaseUri}?";

            dailyLink += string.Join("&", scene.Characters.Select(x => $"character={x.Id}")) + "&";
            dailyLink += string.Join("&", scene.Areas.Select(x => $"area={x.Id}")) + "&";
            dailyLink += $"game={scene.Game.Id}&";
            dailyLink += string.Join("&", scene.Music.Select(x => $"music={x.Id}")) + "&";
            dailyLink += $"scene={scene.Id}&";
            dailyLink += string.Join("&", scene.Worlds.Select(x => $"world={x.Id}")) + "&";
            dailyLink += $"open_row={scene.Id}";

            NavigationManager.NavigateTo(dailyLink, true);
        }
        catch (Exception)
        {

        }
    }

    public void NavigateToRandomCutscene()
    {
        try
        {
            Random random = new Random((int)DateTime.Now.Ticks);
            var randomSceneId = random.Next(0, this.context.Scenes.Count());
            var scene = this.context.Scenes.AsNoTracking()
                .Include(s => s.Characters).Include(s => s.Areas).Include(s => s.Game).Include(s => s.Music).Include(s => s.Worlds)
                .FirstOrDefault(s => s.Id == randomSceneId);

            if (scene == null)
            {
                return;
            }

            var randomLink = $"{NavigationManager.BaseUri}?";

            randomLink += string.Join("&", scene.Characters.Select(x => $"character={x.Id}")) + "&";
            randomLink += string.Join("&", scene.Areas.Select(x => $"area={x.Id}")) + "&";
            randomLink += $"game={scene.Game.Id}&";
            randomLink += string.Join("&", scene.Music.Select(x => $"music={x.Id}")) + "&";
            randomLink += $"scene={scene.Id}&";
            randomLink += string.Join("&", scene.Worlds.Select(x => $"world={x.Id}")) + "&";
            randomLink += $"open_row={scene.Id}";

            NavigationManager.NavigateTo(randomLink, true);
        }
        catch (Exception)
        {
            
        }
    }
}