// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WayfinderProjectAPI.Data;

#nullable disable

namespace WayfinderProject.Migrations
{
    [DbContext(typeof(WayfinderContext))]
    [Migration("20230817071012_AddTrailers")]
    partial class AddTrailers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AreaCharacterLocation", b =>
                {
                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterLocationsId")
                        .HasColumnType("int");

                    b.HasKey("AreasId", "CharacterLocationsId");

                    b.HasIndex("CharacterLocationsId");

                    b.ToTable("AreaCharacterLocation");
                });

            modelBuilder.Entity("AreaInteraction", b =>
                {
                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<int>("InteractionsId")
                        .HasColumnType("int");

                    b.HasKey("AreasId", "InteractionsId");

                    b.HasIndex("InteractionsId");

                    b.ToTable("AreaInteraction");
                });

            modelBuilder.Entity("AreaScene", b =>
                {
                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<int>("ScenesId")
                        .HasColumnType("int");

                    b.HasKey("AreasId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("AreaScene");
                });

            modelBuilder.Entity("AreaTrailer", b =>
                {
                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<int>("TrailersId")
                        .HasColumnType("int");

                    b.HasKey("AreasId", "TrailersId");

                    b.HasIndex("TrailersId");

                    b.ToTable("AreaTrailer");
                });

            modelBuilder.Entity("CharacterInteraction", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("InteractionsId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "InteractionsId");

                    b.HasIndex("InteractionsId");

                    b.ToTable("CharacterInteraction");
                });

            modelBuilder.Entity("CharacterJournalEntry", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("JournalEntriesId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "JournalEntriesId");

                    b.HasIndex("JournalEntriesId");

                    b.ToTable("CharacterJournalEntry");
                });

            modelBuilder.Entity("CharacterScene", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("ScenesId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("CharacterScene");
                });

            modelBuilder.Entity("CharacterTrailer", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("TrailersId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "TrailersId");

                    b.HasIndex("TrailersId");

                    b.ToTable("CharacterTrailer");
                });

            modelBuilder.Entity("GameInterview", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewsId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "InterviewsId");

                    b.HasIndex("InterviewsId");

                    b.ToTable("GameInterview");
                });

            modelBuilder.Entity("InteractionMusic", b =>
                {
                    b.Property<int>("InteractionsId")
                        .HasColumnType("int");

                    b.Property<int>("MusicId")
                        .HasColumnType("int");

                    b.HasKey("InteractionsId", "MusicId");

                    b.HasIndex("MusicId");

                    b.ToTable("InteractionMusic");
                });

            modelBuilder.Entity("InteractionWorld", b =>
                {
                    b.Property<int>("InteractionsId")
                        .HasColumnType("int");

                    b.Property<int>("WorldsId")
                        .HasColumnType("int");

                    b.HasKey("InteractionsId", "WorldsId");

                    b.HasIndex("WorldsId");

                    b.ToTable("InteractionWorld");
                });

            modelBuilder.Entity("InterviewParticipant", b =>
                {
                    b.Property<int>("InterviewsId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.HasKey("InterviewsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("InterviewParticipant");
                });

            modelBuilder.Entity("JournalEntryWorld", b =>
                {
                    b.Property<int>("JournalEntriesId")
                        .HasColumnType("int");

                    b.Property<int>("WorldsId")
                        .HasColumnType("int");

                    b.HasKey("JournalEntriesId", "WorldsId");

                    b.HasIndex("WorldsId");

                    b.ToTable("JournalEntryWorld");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MusicScene", b =>
                {
                    b.Property<int>("MusicId")
                        .HasColumnType("int");

                    b.Property<int>("ScenesId")
                        .HasColumnType("int");

                    b.HasKey("MusicId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("MusicScene");
                });

            modelBuilder.Entity("MusicTrailer", b =>
                {
                    b.Property<int>("MusicId")
                        .HasColumnType("int");

                    b.Property<int>("TrailersId")
                        .HasColumnType("int");

                    b.HasKey("MusicId", "TrailersId");

                    b.HasIndex("TrailersId");

                    b.ToTable("MusicTrailer");
                });

            modelBuilder.Entity("SceneWorld", b =>
                {
                    b.Property<int>("ScenesId")
                        .HasColumnType("int");

                    b.Property<int>("WorldsId")
                        .HasColumnType("int");

                    b.HasKey("ScenesId", "WorldsId");

                    b.HasIndex("WorldsId");

                    b.ToTable("SceneWorld");
                });

            modelBuilder.Entity("TrailerWorld", b =>
                {
                    b.Property<int>("TrailersId")
                        .HasColumnType("int");

                    b.Property<int>("WorldsId")
                        .HasColumnType("int");

                    b.HasKey("TrailersId", "WorldsId");

                    b.HasIndex("WorldsId");

                    b.ToTable("TrailerWorld");
                });

            modelBuilder.Entity("WayfinderProject.Data.Models.DailyCutscene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DateCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("HasTweeted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DateCode" }, "Index_DateCode");

                    b.ToTable("DailyCutscenes");
                });

            modelBuilder.Entity("WayfinderProject.Data.Models.DailyJournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DateCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EntryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasTweeted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DateCode" }, "Index_DateCode")
                        .HasDatabaseName("Index_DateCode1");

                    b.ToTable("DailyJournalEntries");
                });

            modelBuilder.Entity("WayfinderProject.Data.Models.DailyMoogleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DateCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("HasTweeted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DateCode" }, "Index_DateCode")
                        .HasDatabaseName("Index_DateCode2");

                    b.ToTable("DailyMoogleRecords");
                });

            modelBuilder.Entity("WayfinderProject.Data.Models.WayfinderProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ApiCallQuota")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PatreonAccessToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PatreonRefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Alias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppearAs")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Original" }, "Index_AliasOriginal");

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_AreaName");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_CharacterName");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.CharacterLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GameId");

                    b.HasIndex("WorldId");

                    b.ToTable("CharacterLocations");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.EnemyDrop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CharacterLocationId")
                        .HasColumnType("int");

                    b.Property<float>("DropRate")
                        .HasColumnType("float");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterLocationId");

                    b.HasIndex("InventoryId");

                    b.ToTable("MS_EnemyDrop");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SpecificRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "Index_FavoriteAccountId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_GameName");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ScriptId");

                    b.HasIndex(new[] { "Name" }, "Index_InteractionName");

                    b.ToTable("MA_Interaction");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("TranslatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TranslatorId");

                    b.HasIndex(new[] { "Name" }, "Index_InterviewName");

                    b.ToTable("MA_Interview");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.InterviewLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Speaker")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("InterviewLines");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("MS_Inventory");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("JJ_Entry");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_MusicName");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_ParticipantName");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "Index_ProjectAccountId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.ProjectRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectRecords");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_ProviderName");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UnlockConditionDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("MS_Recipe");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.RecipeMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MS_RecipeMaterial");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ScriptId");

                    b.HasIndex(new[] { "Name" }, "Index_SceneName");

                    b.ToTable("MA_Scene");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameName", "SceneName" }, "Index_GameSceneName");

                    b.ToTable("Script");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.ScriptLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptLine");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Param1Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Param2Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Param3Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Param4Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Param5Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Param6Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Param7Search")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificSearch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TextSearch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "Index_HistoryAccountId");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.SearchSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("AutoExpandFirstResult")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AutoSearch")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FavouriteSearch")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludeAlias")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MainSearchEverything")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ProjectSearch")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ResultsDisplay")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("TrackHistory")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "Index_SettingsAccountId");

                    b.ToTable("SearchSettings");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Trailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ScriptId");

                    b.HasIndex(new[] { "Name" }, "Index_TrailerName");

                    b.ToTable("MA_Trailer");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Translator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_TranslatorName");

                    b.ToTable("Translators");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.World", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Index_WorldName");

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("AreaCharacterLocation", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.CharacterLocation", null)
                        .WithMany()
                        .HasForeignKey("CharacterLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaInteraction", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Interaction", null)
                        .WithMany()
                        .HasForeignKey("InteractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaScene", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Scene", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaTrailer", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterInteraction", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Interaction", null)
                        .WithMany()
                        .HasForeignKey("InteractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterJournalEntry", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.JournalEntry", null)
                        .WithMany()
                        .HasForeignKey("JournalEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterScene", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Scene", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterTrailer", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameInterview", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Interview", null)
                        .WithMany()
                        .HasForeignKey("InterviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InteractionMusic", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Interaction", null)
                        .WithMany()
                        .HasForeignKey("InteractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InteractionWorld", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Interaction", null)
                        .WithMany()
                        .HasForeignKey("InteractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.World", null)
                        .WithMany()
                        .HasForeignKey("WorldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterviewParticipant", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Interview", null)
                        .WithMany()
                        .HasForeignKey("InterviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JournalEntryWorld", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.JournalEntry", null)
                        .WithMany()
                        .HasForeignKey("JournalEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.World", null)
                        .WithMany()
                        .HasForeignKey("WorldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WayfinderProject.Data.Models.WayfinderProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WayfinderProject.Data.Models.WayfinderProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProject.Data.Models.WayfinderProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WayfinderProject.Data.Models.WayfinderProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicScene", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Scene", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicTrailer", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SceneWorld", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Scene", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.World", null)
                        .WithMany()
                        .HasForeignKey("WorldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrailerWorld", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.World", null)
                        .WithMany()
                        .HasForeignKey("WorldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.CharacterLocation", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Character", "Character")
                        .WithMany("CharacterLocations")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.World", "World")
                        .WithMany("CharacterLocations")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Game");

                    b.Navigation("World");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.EnemyDrop", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.CharacterLocation", "CharacterLocation")
                        .WithMany()
                        .HasForeignKey("CharacterLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Inventory", "Inventory")
                        .WithMany("EnemyDrops")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterLocation");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Interaction", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany("Interactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Script", "Script")
                        .WithMany("Interactions")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Interview", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Provider", "Provider")
                        .WithMany("Interviews")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Translator", "Translator")
                        .WithMany("Interviews")
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Translator");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.InterviewLine", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Interview", "Interview")
                        .WithMany("Conversation")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Inventory", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.JournalEntry", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany("JournalEntries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.ProjectRecord", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Project", "Project")
                        .WithMany("ProjectRecords")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Recipe", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.RecipeMaterial", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Recipe", null)
                        .WithMany("RecipeMaterials")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Scene", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany("Scenes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Script", "Script")
                        .WithMany("Scenes")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.ScriptLine", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Script", "Script")
                        .WithMany("Lines")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Trailer", b =>
                {
                    b.HasOne("WayfinderProjectAPI.Data.Models.Game", "Game")
                        .WithMany("Trailers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WayfinderProjectAPI.Data.Models.Script", "Script")
                        .WithMany("Trailers")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Character", b =>
                {
                    b.Navigation("CharacterLocations");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Game", b =>
                {
                    b.Navigation("Interactions");

                    b.Navigation("JournalEntries");

                    b.Navigation("Scenes");

                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Interview", b =>
                {
                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Inventory", b =>
                {
                    b.Navigation("EnemyDrops");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Project", b =>
                {
                    b.Navigation("ProjectRecords");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Provider", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Recipe", b =>
                {
                    b.Navigation("RecipeMaterials");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Script", b =>
                {
                    b.Navigation("Interactions");

                    b.Navigation("Lines");

                    b.Navigation("Scenes");

                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.Translator", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("WayfinderProjectAPI.Data.Models.World", b =>
                {
                    b.Navigation("CharacterLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
