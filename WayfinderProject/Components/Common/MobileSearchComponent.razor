@inject IJSRuntime JS

<label style="font-size: larger; margin-top: 10px;"><strong>@Name</strong></label>
@if (this.CurrentView == "Available")
{
    @if (this.AllowMultipleSelect)
    {
        <input class="wayfinder-input" oninput="@((ChangeEventArgs t) => this.UpdateFilteredAvailable(t.Value?.ToString() ?? string.Empty))" placeholder="Filter List..." />
        <select id="@($"Available-{Id}")" class="wayfinder-select" multiple @onchange="@(() => this.Select($"Available-{Id}"))">
            @foreach (var item in this.FilteredAvailable)
            {
                <option class="wayfinder-option" value="@item">@item</option>
            }
        </select>
    }
    else
    {
        <input class="wayfinder-input" oninput="@((ChangeEventArgs t) => this.UpdateFilteredAvailable(t.Value?.ToString() ?? string.Empty))" placeholder="Filter List..." />
        <select id="@($"Available-{Id}")" class="wayfinder-select" @onchange="@(() => this.Select($"Available-{Id}"))">
            @foreach (var item in this.FilteredAvailable)
            {
                <option class="wayfinder-option" value="@item">@item</option>
            }
        </select>
    }
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public string Name { get; set; } = string.Empty;
    [Parameter] public List<string> Initial { get; set; } = new List<string>();
    [Parameter] public List<string> Available { get; set; } = new List<string>();
    [Parameter] public List<string> Selected { get; set; } = new List<string>();

    [Parameter] public string CurrentView { get; set; } = "Available";
    [Parameter] public bool AllowMultipleSelect { get; set; } = true;

    [Parameter] public Func<Task>? UpdateSearch { get; set; }

    private List<string> FilteredAvailable { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        this.FilteredAvailable = this.Initial.ToList();

        await base.OnParametersSetAsync();
    }

    private async Task Select(string id)
    {
        var values = await JS.InvokeAsync<string[]>("getSelections", id);

        this.Selected.Clear();
        this.Selected.AddRange(values.ToList());
        
        if (this.UpdateSearch != null)
        {
            await Task.Run(async () => await this.UpdateSearch.Invoke());
        }

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    private async Task UpdateFilteredAvailable(string search)
    {
        this.FilteredAvailable = new List<string>();

        foreach (var selection in this.Initial)
        {
            if (this.Selected.Contains(selection)) continue;

            if (string.IsNullOrEmpty(search) || selection.ToLower().Contains(search.ToLower()))
            {
                this.FilteredAvailable.Add(selection);
            }
        }

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }
}