@using WayfinderProject.Components.Common
@using WayfinderProject.Data
@using WayfinderProject.Data.Models
@using WayfinderProjectAPI.Data.DTOs


<td style="vertical-align: middle;">
    @if (this.MainTable != null)
    {
        if (this.MainTable.CurrentExpandedRow == this.JournalEntry.Id)
        {
            <div class="clickable" style="border-radius: 100px; background-color: #f4f5fd; border: solid 2px #5499fc; width: 30px; height: 30px; padding: 2px 6px 15px 15px;" @onclick="@(() => MainTable.UpdateExpandedRow(JournalEntry.Id))">
                <span class="oi oi-minus mr-1 clickable" style="color: #5499fc; font-size: small;"></span>
            </div>
        }
        else
        {
            <div class="clickable" style="border-radius: 100px; background-color: #f4f5fd; border: solid 2px #5499fc; width: 30px; height: 30px; padding: 2px 6px 15px 15px;" @onclick="@(() => MainTable.UpdateExpandedRow(JournalEntry.Id))">
                <span class="oi oi-plus mr-1 clickable" style="color: #5499fc; font-size: small;"></span>
            </div>
        }
    }
</td>
<td style="vertical-align: middle;">
    <span style="font-weight: 600;">@JournalEntry.Game.Name</span>
</td>
<td style="vertical-align: middle;">
    <span style="font-weight: 600;">@JournalEntry.Title</span>
</td>
@if (!this.ProjectView)
{
<td style="vertical-align: middle;">
    <RowContentDisplay Content="this.JournalEntry.Worlds.Select(x => x.Name).Distinct().ToList()" CustomDisplayClass="world-display" CustomColourClass="world-color" />
</td>
<td style="vertical-align: middle;">
    <RowContentDisplay Content="this.JournalEntry.Characters.Select(x => x.Name).Distinct().ToList()" CustomDisplayClass="character-display" CustomColourClass="character-color" CustomTooltipMargin="-200" />
</td>
<td style="vertical-align: middle;">
    <span style="font-weight: 600;">@JournalEntry.AdditionalInformation</span>
</td>
<td>
    @if (this.LoggedIn)
    {
        if (this.IsFavorite)
        {
            <iconify-icon icon="ic:baseline-star" class="favorite-icon-active" onclick="@(async () => await this.FavoriteCallbackMethod.InvokeAsync())"></iconify-icon>
        }
        else
        {
            <iconify-icon icon="ic:baseline-star-outline" class="favorite-icon-inactive" onclick="@(async () => await this.FavoriteCallbackMethod.InvokeAsync())"></iconify-icon>
        }

    
        if (this.IsProject)
        {
            <iconify-icon icon="material-symbols:folder-rounded" class="project-icon-active" onclick="@(async () => await this.ProjectCallbackMethod.InvokeAsync())"></iconify-icon>
        }
        else
        {
            <iconify-icon icon="material-symbols:folder-outline-rounded" class="project-icon-inactive" onclick="@(async () => await this.ProjectCallbackMethod.InvokeAsync())"></iconify-icon>
        }
    }
</td>
}
else
{
<td style="width: 70%; vertical-align: middle;">
    <label>@this.Notes</label>
</td>
<td>
    <iconify-icon icon="material-symbols:edit" class="project-icon-inactive" style="color: grey;" onclick="@(async () => await this.NotesCallbackMethod.InvokeAsync())"></iconify-icon>
    <iconify-icon icon="material-symbols:delete" class="project-icon-inactive" style="color: #d70e0e;" onclick="@(async () => await this.ProjectCallbackMethod.InvokeAsync())"></iconify-icon>
</td>
}

<style>
.clickable {
    float: right;
    font-size: 1rem;
    color: #3e79a7;
    margin-top: 3px;
    cursor: pointer;
}

.favorite-icon-inactive {
    font-size: x-large;
    margin-top: 5px;
    width: 30px;
    color: #b4b4b4ab;
    cursor: pointer;
    transition: color ease-in-out .4s;
}

    .favorite-icon-inactive:hover {
        color: #e7c009;
    }

.favorite-icon-active {
    font-size: x-large;
    margin-top: 5px;
    width: 30px;
    color: #e7c009;
    cursor: pointer;
    transition: color ease-in-out .4s;
}

    .favorite-icon-active:hover {
        color: #b4b4b4ab;
    }

.project-icon-inactive {
    font-size: x-large;
    margin-top: 5px;
    color: #b4b4b4ab;
    cursor: pointer;
    transition: color ease-in-out .4s;
}

    .project-icon-inactive:hover {
        color: #c76ce9;
    }

.project-icon-active {
    font-size: x-large;
    margin-top: 5px;
    color: #c76ce9;
    cursor: pointer;
    transition: color ease-in-out .4s;
}


    .project-icon-active:hover {
        color: #b4b4b4ab;
    }
</style>

@code {
    [Parameter] public JournalEntryDto JournalEntry { get; set; } = new JournalEntryDto();
    [Parameter] public JournalEntryTable<JournalEntryDto>? MainTable { get; set; }
    [Parameter] public bool LoggedIn { get; set; }
    [Parameter] public bool IsFavorite { get; set; }
    [Parameter] public bool IsProject { get; set; }
    [Parameter] public bool ProjectView { get; set; }
    [Parameter] public string Notes { get; set; } = string.Empty;
    [Parameter] public EventCallback FavoriteCallbackMethod { get; set; } = default!;
    [Parameter] public EventCallback ProjectCallbackMethod { get; set; } = default!;
    [Parameter] public EventCallback NotesCallbackMethod { get; set; } = default!;

    private BrowserDimension BrowserDimension { get; set; } = new BrowserDimension();

    protected override async Task OnParametersSetAsync()
    {
        //this.BrowserDimension = await BrowserService.GetDimensions();

        await base.OnParametersSetAsync();
    }
}
