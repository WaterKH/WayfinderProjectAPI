@using WayfinderProjectAPI.Data.DTOs

@inject NavigationManager NavigationManager

<tr>
    <td colspan="12" style="background-color: #f1f1f1; border-radius: 50px; padding: 50px;">
        <div class="row">
            <div class="col-md-5">
                <div style="height: 563px; border-radius: 25px; background-color: #ffffff; padding: 25px; overflow-y: scroll;">
                    @if (this.Inventory != null)
                    {
                        <div class="row" style="height: 281px;">
                            <div class="col-md-6">
                                <h3>@(Inventory.Name)</h3>
                            </div>

                            <div class="col-md-6">
                                <div id="share" class="share" @onclick="@(() => { if (this.GenerateShareLink != null) { this.GenerateShareLink.Invoke(); } })">
                                    <span class="copyable">
                                        <i class="oi oi-file"></i>
                                        <label class="share-text"><b>Share Inventory Record</b></label>
                                        <br />
                                    </span>
                                </div>
                            </div>

                            <div class="col-md-12" style="margin-top: 25px;">
                                <label>@(Inventory.Description)</label><br />
                            </div>

                            @if (!string.IsNullOrEmpty(Inventory.AdditionalInformation))
                            {
                                <div class="col-md-12" style="margin-top: 25px;">
                                    <label>@(Inventory.AdditionalInformation)</label><br />
                                </div>
                            }

                            TODO - Get Enemy, Drop Rates and Locations
                            @*<div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="world-color"><img src="/images/icons/worlds.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Worlds</h3>
                                <label>@(string.Join(", ", this.Inventory.EnemyDrops.Select(x => x.)))</label><br />
                            </div>

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="character-color"><img src="/images/icons/characters.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Characters</h3>
                                <label>@(string.Join(", ", this.JournalEntry.Characters.Select(x => x.Name)))</label><br />
                            </div>*@

                            <br />

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="scene-color">Memory Archive Scenes</h3>

                                @*<button class="wayfinder-button" onclick="@(() => NavigationManager.NavigateTo(this.memoryArchiveWithGameLink))" style="margin-right: 15px; margin-bottom: 15px;">Scenes By Game</button>
                                <button class="wayfinder-button" onclick="@(() => NavigationManager.NavigateTo(this.memoryArchiveWithoutGameLink))">All Character Scenes</button>*@
                            </div>
                        </div>
                    }
                </div>
            </div>


            <div class="col-md-7">
                @*@if (this.loadingFirstAppearance)
                {
                    <div style="width: 100%; height: 563px; border-radius: 25px; background-color: #ececec; text-align: center; vertical-align: middle;">
                        
                    </div>
                }
                else
                {
                    if (this.firstAppearanceScene != null)
                    {
                        <iframe src="@(this.firstAppearanceScene.Link.Replace("watch?v=", "embed/").Split("&list=")[0])" style="border-radius: 25px; width: 100%; height: 536px;"></iframe>
                    }
                    else
                    {
                        <div style="width: 100%; height: 563px; border-radius: 25px; background-color: #ececec; text-align: center; vertical-align: middle;">
                            <label>No scene appearance found in the Memory Archive for this character in this game.</label>
                        </div>
                    }
                }*@
            </div>
        </div>
    </td>
</tr>


@code {
    [Parameter] public InventoryDto? Inventory { get; set; }
    [Parameter] public WayfinderProjectAPI.Controllers.WayfinderController? API { get; set; }

    [Parameter] public Func<Task>? GenerateShareLink { get; set; }

    public string CurrentSubOption { get; set; } = "Details";

    //private SceneDto? firstAppearanceScene = new SceneDto();
    //private bool loadingFirstAppearance = true;
    //private string memoryArchiveWithoutGameLink = string.Empty;
    //private string memoryArchiveWithGameLink = string.Empty;

    protected override void OnInitialized()
    {
        if (this.Inventory != null)
        {
            Task.Run(async () =>
            {
                //if (this.Inventory.Category == "Story" && this.API != null)
                //{
                //    string worldName = JournalEntry.Worlds.FirstOrDefault()?.Name ?? string.Empty;
                //    this.firstAppearanceScene = await this.API.GetWorldsFirstAppearance(worldName, JournalEntry.Game.Name);
                //}
                //else if (this.JournalEntry.Category == "Character" && this.API != null)
                //{
                //    string characterName = JournalEntry.Characters.FirstOrDefault()?.Name ?? string.Empty;
                //    this.firstAppearanceScene = await this.API.GetCharactersFirstAppearance(characterName, JournalEntry.Game.Name);
                //}

                //this.loadingFirstAppearance = false;

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            });


            //this.memoryArchiveWithoutGameLink = $"{NavigationManager.BaseUri}memory_archive?{string.Join("&", JournalEntry.Characters.Select(character => $"characters={character.Id}"))}&category=Scenes";
            //this.memoryArchiveWithGameLink = $"{NavigationManager.BaseUri}memory_archive?game={JournalEntry.Game.Id}&{string.Join("&", JournalEntry.Characters.Select(character => $"character={character.Id}"))}&category=Scenes";
        }

        base.OnInitialized();
    }

    public async Task UpdateCurrentSubOption(string option)
    {
        this.CurrentSubOption = option;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }
}
