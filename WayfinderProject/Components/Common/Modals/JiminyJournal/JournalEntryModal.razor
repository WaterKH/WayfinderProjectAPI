@using WayfinderProjectAPI.Data.DTOs
@using WayfinderProjectAPI.Controllers

@inject NavigationManager NavigationManager

<div class="simple-form clear-modal">
    <div class="row">
        <div class="col-md-12">
            <SubNavBar Options="options" UpdateCurrentOption="@(async (string option) => await UpdateCurrentSubOption(option))" StartingOption="@this.CurrentSubOption" CustomStyle="margin-top: -15px;" InvertBackgroundColor="true" />

            @if (this.CurrentSubOption == "Details")
            {
                <div style="height: 523px; border-radius: 25px; background-color: #ffffff; padding: 25px; overflow-y: scroll;">
                    @if (this.JournalEntry != null)
                    {
                        <div class="row" style="height: 281px;">
                            <div class="col-md-6">
                                <div id="share" class="share" @onclick="@(() => { if (this.GenerateShareLink != null) { this.GenerateShareLink.Invoke(); } })">
                                    <span class="copyable">
                                        <i class="oi oi-file"></i>
                                        <label class="share-text"><b>Share Character Entry</b></label>
                                        <br />
                                    </span>
                                </div>
                            </div>

                            <br />

                            <div class="col-md-6">
                                <h3>@(JournalEntry.Title)</h3>
                            </div>

                            <div class="col-md-12" style="margin-top: 25px;">
                                <label>@(JournalEntry.Description)</label><br />
                            </div>

                            @if (!string.IsNullOrEmpty(JournalEntry.AdditionalInformation))
                            {
                                <div class="col-md-12" style="margin-top: 25px;">
                                    <label>@(JournalEntry.AdditionalInformation)</label><br />
                                </div>
                            }

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="world-color"><img src="/images/icons/worlds.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Worlds</h3>
                                <label>@(string.Join(", ", this.JournalEntry.Worlds.Select(x => x.Name)))</label><br />
                            </div>

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="character-color"><img src="/images/icons/characters.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Characters</h3>
                                <label>@(string.Join(", ", this.JournalEntry.Characters.Select(x => x.Name)))</label><br />
                            </div>

                            <br />

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="scene-color">Memory Archive Scenes</h3>

                                <button class="wayfinder-button" onclick="@(() => NavigationManager.NavigateTo(this.memoryArchiveWithGameLink))" style="margin-right: 15px; margin-bottom: 15px;">Scenes By Game</button>
                                <button class="wayfinder-button" onclick="@(() => NavigationManager.NavigateTo(this.memoryArchiveWithoutGameLink))">All Character Scenes</button>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (this.CurrentSubOption == "Video" && this.firstAppearanceScene != null)
            {
                <iframe src="@(this.firstAppearanceScene.Link.Replace("watch?v=", "embed/").Split("&list=")[0])" style="border-radius: 25px; width: 100%; height: 536px;"></iframe>
            }
        </div>
    </div>

    <hr />

    <button onclick="@(async () => await BlazoredModal.CancelAsync())" class="btn cancel-button" style="margin-left: 15px;">Close</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public JournalEntryDto JournalEntry { get; set; } = default!;
    [Parameter] public WayfinderController? API { get; set; }
    
    [Parameter] public Func<Task>? GenerateShareLink { get; set; }

    public string CurrentSubOption { get; set; } = "Details";

    private SceneDto? firstAppearanceScene = new SceneDto();
    private string memoryArchiveWithoutGameLink = string.Empty;
    private string memoryArchiveWithGameLink = string.Empty;

    private List<string> options = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (this.JournalEntry != null)
        {
            if (this.JournalEntry.Category == "Story" && this.API != null)
            {
                string worldName = JournalEntry.Worlds.FirstOrDefault()?.Name ?? string.Empty;
                this.firstAppearanceScene = await this.API.GetWorldsFirstAppearance(worldName, JournalEntry.Game.Name);
            }
            else if (this.JournalEntry.Category == "Character" && this.API != null)
            {
                string characterName = JournalEntry.Characters.FirstOrDefault()?.Name ?? string.Empty;
                this.firstAppearanceScene = await this.API.GetCharactersFirstAppearance(characterName, JournalEntry.Game.Name);
            }
            else if (this.JournalEntry.Category == "Enemy" && this.API != null)
            {
                string enemyName = JournalEntry.Characters.FirstOrDefault()?.Name ?? string.Empty;
                this.firstAppearanceScene = await this.API.GetCharactersFirstAppearance(enemyName, JournalEntry.Game.Name);
            }

            if (this.firstAppearanceScene != null)
            {
                options = new List<string> { "Details", "Video" };
            }
            else
            {
                options = new List<string> { "Details" };
            }
            
            await InvokeAsync(() =>
            {
                this.StateHasChanged();
            });

            this.memoryArchiveWithoutGameLink = $"{NavigationManager.BaseUri}memory_archive?{string.Join("&", JournalEntry.Characters.Select(character => $"characters={character.Id}"))}&category=Scenes";
            this.memoryArchiveWithGameLink = $"{NavigationManager.BaseUri}memory_archive?game={JournalEntry.Game.Id}&{string.Join("&", JournalEntry.Characters.Select(character => $"character={character.Id}"))}&category=Scenes";
        }

        await base.OnInitializedAsync();
    }

    public async Task UpdateCurrentSubOption(string option)
    {
        this.CurrentSubOption = option;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }
}