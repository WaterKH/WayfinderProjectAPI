<div class="wayfinder-sub-nav-bar" style="@(CustomStyle)">
    @if (!string.IsNullOrEmpty(this.FocusOption))
    {
        <div class="@((this.CurrentOption == this.FocusOption) ? "wayfinder-container-active" : "wayfinder-container")" @onclick="@(() => this.Select(this.FocusOption))" style="margin-right: 25px;">
            <div class="@((this.CurrentOption == this.FocusOption) ? "wayfinder-option-active" : "wayfinder-option")" style="max-width: 200px; ">
                <img src="@this.GetImage(this.FocusOption)" style="width: 15px; vertical-align: unset; margin-right: 10px; margin-top: 3px;" />  @this.FocusOption
            </div>
        </div>

        <span style="width: 2px; border: 1px solid #ececec; margin-right: 25px;"></span>
    }

    @foreach (var option in this.Options)
    {
        @if (option != this.FocusOption)
        {
            <div class="@((this.CurrentOption == option) ? "wayfinder-container-active" : "wayfinder-container")" @onclick="@(() => this.Select(option))">
                <div class="@((this.CurrentOption == option) ? "wayfinder-option-active" : "wayfinder-option")" style="max-width: 200px;">
                    <img src="@this.GetImage(option)" style="width: 15px; vertical-align: unset; margin-right: 10px; margin-top: 3px;" />  @option
                </div>
            </div>
        }
    }
</div>

<div class="wayfinder-sub-nav-bar-border"></div>

@code {
    [Parameter] public List<string> Options { get; set; } = new List<string>();
    [Parameter] public string CustomStyle { get; set; } = string.Empty;
    [Parameter] public string StartingOption { get; set; } = string.Empty;
    [Parameter] public string FocusOption { get; set; } = string.Empty;

    [Parameter] public Action<string>? UpdateCurrentOption { get; set; }

    public string CurrentOption { get; set; } = "Games";

    protected override void OnInitialized()
    {
        this.CurrentOption = this.StartingOption;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        this.CurrentOption = this.StartingOption;

        base.OnInitialized();
    }

    public async Task Select(string option)
    {
        this.CurrentOption = option;

        await Task.Run(() => { if (this.UpdateCurrentOption != null) { this.UpdateCurrentOption.Invoke(option); } });

        await InvokeAsync(() => { 
            this.StateHasChanged(); 
        });
    }

    public string GetImage(string option)
    {
        string path = "";

        switch (option)
        {
            case "Scenes":
            case "Entries":
                path = "/images/icons/scenes_gray.png";
                break;

            case "Games":
                path = "/images/icons/games_gray.png";
                break;
            case "Worlds":
                path = "/images/icons/worlds_gray.png";
                break;
            case "Areas":
                path = "/images/icons/areas_gray.png";
                break;
            case "Characters":
                path = "/images/icons/characters_gray.png";
                break;
            case "Music":
                path = "/images/icons/music_gray.png";
                break;
            default:
                break;
        }

        return path;
    }
}
