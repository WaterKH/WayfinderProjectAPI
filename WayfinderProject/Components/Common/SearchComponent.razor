@if(this.CurrentOption == this.Id)
{
<div class="search">
    <div class="wayfinder-buttons">
        <button class="@(this.CurrentView == "Selections" ? "wayfinder-outlined-button" : "wayfinder-search-button")" @onclick="@(() => ToggleView())">@(this.CurrentView == "Options" ? "Filters" : "Options")</button>
    </div>


    <div class="search-bar" style="margin: 10px 0px 30px 0px; margin-left: -45px;">
        <span class="wayfinder-search-icon material-icons">search</span>
        <input value="@this.search" id="@($"{this.Id}-search")" name="@($"{this.Id}-search")" class="custom-input"
            oninput="@((ChangeEventArgs e) => this.Search(e?.Value?.ToString()))" @onfocus="@(() => this.Search(""))" placeholder="@this.Placeholder" disabled="@(this.CurrentView != "Options")">
    </div>

    @if (this.CurrentView == "Options")
    {
    <div class="search-results">
        @if (this.results.Count > 0)
        {
            <div class="row" style="padding-left: 15px;">
                @for (int i = 0; i < this.results.Count; ++i)
                {
                    var tempResult = this.results[i];
                    <div class="col-md-5">
                        <SearchOption Id="@this.Id" Color="@this.Color" Value="@tempResult" IsSelected="false" SelectValue="@(() => Select(tempResult))" />
                    </div>

                    if (i % 2 != 0)
                    {
                        <div class="col-md-2"></div>
                    }
                }
            </div>
        }
        else if (!string.IsNullOrEmpty(this.search))
        {
            <em>No results were found for that string.</em>
        }
    </div>
    }
    else if (this.CurrentView == "Selections")
    {
            <div class="search-results">
            @if (this.selected.Count > 0)
            {
                <div class="row" style="padding-left: 15px;">
                    @for (int i = 0; i < this.selected.Count; ++i)
                    {
                        var tempResult = this.selected[i];
                        <div class="col-md-5">
                            <SearchOption Id="@this.Id" Color="@this.Color" Value="@tempResult" IsSelected="true" SelectValue="@(() => Remove(tempResult))" />
                        </div>

                        if (i % 2 != 0)
                        {
                            <div class="col-md-2"></div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>
}

<style>
    .search-result {
        background-color: transparent;
        color: #2e2e2e;
        padding: 5px 10px;
        border: 1px solid black;
        border-radius: 30px;
        margin: 5px 7px;
        display: inline-block;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.5s ease;
    }
        .search-result:hover {
            background-color: #9fd5ff !important;
        }


    .remove{
        background-color: #7ecdff;
    }
        .remove:hover {
            background-color: #ce5858 !important;
        }
</style>
@code {
    [Parameter] public string Id { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Search for values...";
    [Parameter] public string Color { get; set; } = "#ffffff";
    [Parameter] public bool CanSearch { get; set; } = true;
    [Parameter] public List<string> Selections { get; set; } = new List<string>();
    [Parameter] public string CurrentOption { get; set; }

    [Parameter] public Func<Task> UpdateSearch { get; set; }


    private string search = "";

    public List<string> selected { get; set; } = new List<string>();
    public List<string> results = new List<string>();
    public string CurrentView = "Options";

    private Dictionary<string, string> Colors = new Dictionary<string, string> {
        { "", "" }
    };

    protected override async Task OnInitializedAsync()
    {
        this.Selections.Sort();
        this.results = this.Selections;

        await base.OnInitializedAsync();
    }

    private void Search(string search)
    {
        this.search = search;
        this.results = new List<string>();

        if (string.IsNullOrEmpty(search))
        {
            this.results = this.Selections;
            return;
        }

        foreach (var selection in this.Selections)
        {
            if (this.selected.Contains(selection)) continue;

            if (selection.ToLower().Contains(search.ToLower()))
            {
                this.results.Add(selection);
            }
        }

        this.results.Sort();
    }

    private async Task Select(string value)
    {
        if (!this.CanSearch)
            return;

        this.selected.Add(value);

        if (!string.IsNullOrEmpty(search))
        {
            this.Search(this.search);
        }
        else
        {
            this.results.Remove(value);
            this.results.Sort();
        }

        this.search = string.Empty;

        await Task.Run(async () => await this.UpdateSearch.Invoke());

        if (this.results.Count == 0)
            this.CurrentView = "Selections";

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    private async Task Remove(string value)
    {
        if (!this.CanSearch)
            return;

        this.selected.Remove(value);

        if (!string.IsNullOrEmpty(search))
        {
            this.Search(this.search);
        }
        else
        {
            this.results.Add(value);
            this.results.Sort();
        }

        this.search = string.Empty;

        await Task.Run(async () => await this.UpdateSearch.Invoke());

        if (this.selected.Count == 0)
            this.CurrentView = "Options";

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    private void ToggleView()
    {
        if (this.CurrentView == "Options")
        {
            this.CurrentView = "Selections";
        }
        else if (this.CurrentView == "Selections")
        {
            this.CurrentView = "Options";
        }
    }
}