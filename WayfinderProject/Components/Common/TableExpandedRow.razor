@using WayfinderProjectAPI.Data.DTOs

<tr>
    <td colspan="12" style="background-color: #f1f1f1; border-radius: 50px; padding: 50px;">
        <div class="row">
            <div class="col-md-5">
                <NavBar Options="@(new List<string> { "Details", "Dialogue" })" UpdateCurrentOption="@(async (string option) => await UpdateCurrentSubOption(option))" StartingOption="@this.CurrentSubOption" />

                @if (this.CurrentSubOption == "Details")
                {
                    <div style="height: 523px; margin-top: 10px; border-radius: 25px; background-color: #ffffff; padding: 25px;">
                        <div class="row" style="height: 281px;">
                            <div class="col-md-12">
                                <div id="share" class="share" @onclick="@(() => this.GenerateShareLink.Invoke())">
                                    <span class="copyable">
                                        <i class="oi oi-file"></i>
                                        <label class="share-text"><b>Share Scene</b></label>
                                    </span>
                                </div>
                            </div>

                            <div class="col-md-12">
                                <h3 class="world-color"><img src="/images/icons/worlds.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Worlds</h3>
                                <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Worlds.Select(x => x.Name)))</label><br />
                            </div>

                            <br />

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="character-color"><img src="/images/icons/characters.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Characters</h3>
                                <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Characters.Select(x => x.Name)))</label><br />
                            </div>

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="area-color"><img src="/images/icons/areas.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Areas</h3>
                                <label>@(string.Join(", ", this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Areas.Select(x => x.Name)))</label><br />
                            </div>

                            <div class="col-md-12" style="margin-top: 25px;">
                                <h3 class="music-color"><img src="/images/icons/music.png" style="width: 25px; margin-right: 10px; margin-top: -3px;" /> Music</h3>
                                <label>
                                    <div style="display: inline-flex;">
                                        @for (int i = 0; i < this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name).Music.Count; ++i)
                                        {
                                            var currentScene = this.SceneDtos.FirstOrDefault(x => x.Game.Name == Scene.Game.Name && x.Name == Scene.Name);
                                            @if (@currentScene.Music.ToList()[i].Name != ":None:")
                                            {
                                                <a href="@currentScene.Music.ToList()[i].Link" target="_blank">@currentScene.Music.ToList()[i].Name</a>
                                                if (i < currentScene.Music.Count - 1)
                                                {
                                                    <div>,&ensp;</div>
                                                }
                                            }
                                            else
                                            {
                                                @currentScene.Music.ToList()[i].Name
                                            }
                                        }
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>
                }
                else if (this.CurrentSubOption == "Dialogue")
                {
                    <div style="border-radius: 25px; background-color: #ffffff; padding: 15px; height: 523px; overflow-y: auto; margin-top: 10px;">
                        <Table Items="Scene.Script.Lines.ToList()" Context="Line" CurrentPage="1">
                            <TableHeader>
                                <th>Dialogue</th>
                                <th></th>
                            </TableHeader>
                            <RowTemplate>
                                <td><strong>@Line.Character</strong></td>
                                <td>@Line.Line</td>
                            </RowTemplate>
                        </Table>
                    </div>
                }
            </div>


            <div class="col-md-7">
                <iframe width="100%" height="563px" src="@(Scene.Link.Replace("watch?v=", "embed/").Split("&list=")[0])"></iframe>
            </div>
        </div>
    </td>
</tr>


@code {
    [Parameter] public List<SceneDto> SceneDtos { get; set; }
    [Parameter] public SceneDto Scene {get; set;}
    [Parameter] public WayfinderProjectAPI.Controllers.WayfinderController API { get; set; }

    [Parameter] public Func<Task> GenerateShareLink { get; set; }

    public string CurrentSubOption { get; set; } = "Details";


    protected override async Task OnInitializedAsync()
    {
        this.Scene.Script = await this.API.GetScript(Scene.Game.Name, Scene.Name);

        await base.OnInitializedAsync();
    }

    public async Task UpdateCurrentSubOption(string option)
    {
        this.CurrentSubOption = option;

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }
}
